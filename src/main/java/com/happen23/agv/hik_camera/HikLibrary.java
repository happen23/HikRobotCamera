package com.happen23.agv.hik_camera;

import com.happen23.agv.hik_camera.lib_hik.*;
import com.sun.jna.*;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;

import java.nio.ByteBuffer;
import java.nio.IntBuffer;

/**
 * JNA Wrapper for library <b>Hik</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface HikLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "MvCameraControl";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(HikLibrary.JNA_LIBRARY_NAME);
	public static final HikLibrary INSTANCE = (HikLibrary)Native.loadLibrary(HikLibrary.JNA_LIBRARY_NAME, HikLibrary.class);
	/**
	 * Pixel ID: lower 16-bit of the pixel formats<br>
	 * <i>native declaration : include\PixelType.h:31</i><br>
	 * enum values
	 */
	public static interface MvGvspPixelType {
		/** <i>native declaration : include\PixelType.h:37</i> */
		public static final int PixelType_Gvsp_Undefined = -1;
		/** <i>native declaration : include\PixelType.h:40</i> */
		public static final int PixelType_Gvsp_Mono1p = (0x01000000 | ((1) << 16) | 0x0037);
		/** <i>native declaration : include\PixelType.h:41</i> */
		public static final int PixelType_Gvsp_Mono2p = (0x01000000 | ((2) << 16) | 0x0038);
		/** <i>native declaration : include\PixelType.h:42</i> */
		public static final int PixelType_Gvsp_Mono4p = (0x01000000 | ((4) << 16) | 0x0039);
		/** <i>native declaration : include\PixelType.h:43</i> */
		public static final int PixelType_Gvsp_Mono8 = (0x01000000 | ((8) << 16) | 0x0001);
		/** <i>native declaration : include\PixelType.h:44</i> */
		public static final int PixelType_Gvsp_Mono8_Signed = (0x01000000 | ((8) << 16) | 0x0002);
		/** <i>native declaration : include\PixelType.h:45</i> */
		public static final int PixelType_Gvsp_Mono10 = (0x01000000 | ((16) << 16) | 0x0003);
		/** <i>native declaration : include\PixelType.h:46</i> */
		public static final int PixelType_Gvsp_Mono10_Packed = (0x01000000 | ((12) << 16) | 0x0004);
		/** <i>native declaration : include\PixelType.h:47</i> */
		public static final int PixelType_Gvsp_Mono12 = (0x01000000 | ((16) << 16) | 0x0005);
		/** <i>native declaration : include\PixelType.h:48</i> */
		public static final int PixelType_Gvsp_Mono12_Packed = (0x01000000 | ((12) << 16) | 0x0006);
		/** <i>native declaration : include\PixelType.h:49</i> */
		public static final int PixelType_Gvsp_Mono14 = (0x01000000 | ((16) << 16) | 0x0025);
		/** <i>native declaration : include\PixelType.h:50</i> */
		public static final int PixelType_Gvsp_Mono16 = (0x01000000 | ((16) << 16) | 0x0007);
		/** <i>native declaration : include\PixelType.h:53</i> */
		public static final int PixelType_Gvsp_BayerGR8 = (0x01000000 | ((8) << 16) | 0x0008);
		/** <i>native declaration : include\PixelType.h:54</i> */
		public static final int PixelType_Gvsp_BayerRG8 = (0x01000000 | ((8) << 16) | 0x0009);
		/** <i>native declaration : include\PixelType.h:55</i> */
		public static final int PixelType_Gvsp_BayerGB8 = (0x01000000 | ((8) << 16) | 0x000A);
		/** <i>native declaration : include\PixelType.h:56</i> */
		public static final int PixelType_Gvsp_BayerBG8 = (0x01000000 | ((8) << 16) | 0x000B);
		/** <i>native declaration : include\PixelType.h:57</i> */
		public static final int PixelType_Gvsp_BayerGR10 = (0x01000000 | ((16) << 16) | 0x000C);
		/** <i>native declaration : include\PixelType.h:58</i> */
		public static final int PixelType_Gvsp_BayerRG10 = (0x01000000 | ((16) << 16) | 0x000D);
		/** <i>native declaration : include\PixelType.h:59</i> */
		public static final int PixelType_Gvsp_BayerGB10 = (0x01000000 | ((16) << 16) | 0x000E);
		/** <i>native declaration : include\PixelType.h:60</i> */
		public static final int PixelType_Gvsp_BayerBG10 = (0x01000000 | ((16) << 16) | 0x000F);
		/** <i>native declaration : include\PixelType.h:61</i> */
		public static final int PixelType_Gvsp_BayerGR12 = (0x01000000 | ((16) << 16) | 0x0010);
		/** <i>native declaration : include\PixelType.h:62</i> */
		public static final int PixelType_Gvsp_BayerRG12 = (0x01000000 | ((16) << 16) | 0x0011);
		/** <i>native declaration : include\PixelType.h:63</i> */
		public static final int PixelType_Gvsp_BayerGB12 = (0x01000000 | ((16) << 16) | 0x0012);
		/** <i>native declaration : include\PixelType.h:64</i> */
		public static final int PixelType_Gvsp_BayerBG12 = (0x01000000 | ((16) << 16) | 0x0013);
		/** <i>native declaration : include\PixelType.h:65</i> */
		public static final int PixelType_Gvsp_BayerGR10_Packed = (0x01000000 | ((12) << 16) | 0x0026);
		/** <i>native declaration : include\PixelType.h:66</i> */
		public static final int PixelType_Gvsp_BayerRG10_Packed = (0x01000000 | ((12) << 16) | 0x0027);
		/** <i>native declaration : include\PixelType.h:67</i> */
		public static final int PixelType_Gvsp_BayerGB10_Packed = (0x01000000 | ((12) << 16) | 0x0028);
		/** <i>native declaration : include\PixelType.h:68</i> */
		public static final int PixelType_Gvsp_BayerBG10_Packed = (0x01000000 | ((12) << 16) | 0x0029);
		/** <i>native declaration : include\PixelType.h:69</i> */
		public static final int PixelType_Gvsp_BayerGR12_Packed = (0x01000000 | ((12) << 16) | 0x002A);
		/** <i>native declaration : include\PixelType.h:70</i> */
		public static final int PixelType_Gvsp_BayerRG12_Packed = (0x01000000 | ((12) << 16) | 0x002B);
		/** <i>native declaration : include\PixelType.h:71</i> */
		public static final int PixelType_Gvsp_BayerGB12_Packed = (0x01000000 | ((12) << 16) | 0x002C);
		/** <i>native declaration : include\PixelType.h:72</i> */
		public static final int PixelType_Gvsp_BayerBG12_Packed = (0x01000000 | ((12) << 16) | 0x002D);
		/** <i>native declaration : include\PixelType.h:73</i> */
		public static final int PixelType_Gvsp_BayerGR16 = (0x01000000 | ((16) << 16) | 0x002E);
		/** <i>native declaration : include\PixelType.h:74</i> */
		public static final int PixelType_Gvsp_BayerRG16 = (0x01000000 | ((16) << 16) | 0x002F);
		/** <i>native declaration : include\PixelType.h:75</i> */
		public static final int PixelType_Gvsp_BayerGB16 = (0x01000000 | ((16) << 16) | 0x0030);
		/** <i>native declaration : include\PixelType.h:76</i> */
		public static final int PixelType_Gvsp_BayerBG16 = (0x01000000 | ((16) << 16) | 0x0031);
		/** <i>native declaration : include\PixelType.h:79</i> */
		public static final int PixelType_Gvsp_RGB8_Packed = (0x02000000 | ((24) << 16) | 0x0014);
		/** <i>native declaration : include\PixelType.h:80</i> */
		public static final int PixelType_Gvsp_BGR8_Packed = (0x02000000 | ((24) << 16) | 0x0015);
		/** <i>native declaration : include\PixelType.h:81</i> */
		public static final int PixelType_Gvsp_RGBA8_Packed = (0x02000000 | ((32) << 16) | 0x0016);
		/** <i>native declaration : include\PixelType.h:82</i> */
		public static final int PixelType_Gvsp_BGRA8_Packed = (0x02000000 | ((32) << 16) | 0x0017);
		/** <i>native declaration : include\PixelType.h:83</i> */
		public static final int PixelType_Gvsp_RGB10_Packed = (0x02000000 | ((48) << 16) | 0x0018);
		/** <i>native declaration : include\PixelType.h:84</i> */
		public static final int PixelType_Gvsp_BGR10_Packed = (0x02000000 | ((48) << 16) | 0x0019);
		/** <i>native declaration : include\PixelType.h:85</i> */
		public static final int PixelType_Gvsp_RGB12_Packed = (0x02000000 | ((48) << 16) | 0x001A);
		/** <i>native declaration : include\PixelType.h:86</i> */
		public static final int PixelType_Gvsp_BGR12_Packed = (0x02000000 | ((48) << 16) | 0x001B);
		/** <i>native declaration : include\PixelType.h:87</i> */
		public static final int PixelType_Gvsp_RGB16_Packed = (0x02000000 | ((48) << 16) | 0x0033);
		/** <i>native declaration : include\PixelType.h:88</i> */
		public static final int PixelType_Gvsp_RGB10V1_Packed = (0x02000000 | ((32) << 16) | 0x001C);
		/** <i>native declaration : include\PixelType.h:89</i> */
		public static final int PixelType_Gvsp_RGB10V2_Packed = (0x02000000 | ((32) << 16) | 0x001D);
		/** <i>native declaration : include\PixelType.h:90</i> */
		public static final int PixelType_Gvsp_RGB12V1_Packed = (0x02000000 | ((36) << 16) | 0X0034);
		/** <i>native declaration : include\PixelType.h:91</i> */
		public static final int PixelType_Gvsp_RGB565_Packed = (0x02000000 | ((16) << 16) | 0x0035);
		/** <i>native declaration : include\PixelType.h:92</i> */
		public static final int PixelType_Gvsp_BGR565_Packed = (0x02000000 | ((16) << 16) | 0X0036);
		/** <i>native declaration : include\PixelType.h:95</i> */
		public static final int PixelType_Gvsp_YUV411_Packed = (0x02000000 | ((12) << 16) | 0x001E);
		/** <i>native declaration : include\PixelType.h:96</i> */
		public static final int PixelType_Gvsp_YUV422_Packed = (0x02000000 | ((16) << 16) | 0x001F);
		/** <i>native declaration : include\PixelType.h:97</i> */
		public static final int PixelType_Gvsp_YUV422_YUYV_Packed = (0x02000000 | ((16) << 16) | 0x0032);
		/** <i>native declaration : include\PixelType.h:98</i> */
		public static final int PixelType_Gvsp_YUV444_Packed = (0x02000000 | ((24) << 16) | 0x0020);
		/** <i>native declaration : include\PixelType.h:99</i> */
		public static final int PixelType_Gvsp_YCBCR8_CBYCR = (0x02000000 | ((24) << 16) | 0x003A);
		/** <i>native declaration : include\PixelType.h:100</i> */
		public static final int PixelType_Gvsp_YCBCR422_8 = (0x02000000 | ((16) << 16) | 0x003B);
		/** <i>native declaration : include\PixelType.h:101</i> */
		public static final int PixelType_Gvsp_YCBCR422_8_CBYCRY = (0x02000000 | ((16) << 16) | 0x0043);
		/** <i>native declaration : include\PixelType.h:102</i> */
		public static final int PixelType_Gvsp_YCBCR411_8_CBYYCRYY = (0x02000000 | ((12) << 16) | 0x003C);
		/** <i>native declaration : include\PixelType.h:103</i> */
		public static final int PixelType_Gvsp_YCBCR601_8_CBYCR = (0x02000000 | ((24) << 16) | 0x003D);
		/** <i>native declaration : include\PixelType.h:104</i> */
		public static final int PixelType_Gvsp_YCBCR601_422_8 = (0x02000000 | ((16) << 16) | 0x003E);
		/** <i>native declaration : include\PixelType.h:105</i> */
		public static final int PixelType_Gvsp_YCBCR601_422_8_CBYCRY = (0x02000000 | ((16) << 16) | 0x0044);
		/** <i>native declaration : include\PixelType.h:106</i> */
		public static final int PixelType_Gvsp_YCBCR601_411_8_CBYYCRYY = (0x02000000 | ((12) << 16) | 0x003F);
		/** <i>native declaration : include\PixelType.h:107</i> */
		public static final int PixelType_Gvsp_YCBCR709_8_CBYCR = (0x02000000 | ((24) << 16) | 0x0040);
		/** <i>native declaration : include\PixelType.h:108</i> */
		public static final int PixelType_Gvsp_YCBCR709_422_8 = (0x02000000 | ((16) << 16) | 0x0041);
		/** <i>native declaration : include\PixelType.h:109</i> */
		public static final int PixelType_Gvsp_YCBCR709_422_8_CBYCRY = (0x02000000 | ((16) << 16) | 0x0045);
		/** <i>native declaration : include\PixelType.h:110</i> */
		public static final int PixelType_Gvsp_YCBCR709_411_8_CBYYCRYY = (0x02000000 | ((12) << 16) | 0x0042);
		/** <i>native declaration : include\PixelType.h:113</i> */
		public static final int PixelType_Gvsp_RGB8_Planar = (0x02000000 | ((24) << 16) | 0x0021);
		/** <i>native declaration : include\PixelType.h:114</i> */
		public static final int PixelType_Gvsp_RGB10_Planar = (0x02000000 | ((48) << 16) | 0x0022);
		/** <i>native declaration : include\PixelType.h:115</i> */
		public static final int PixelType_Gvsp_RGB12_Planar = (0x02000000 | ((48) << 16) | 0x0023);
		/** <i>native declaration : include\PixelType.h:116</i> */
		public static final int PixelType_Gvsp_RGB16_Planar = (0x02000000 | ((48) << 16) | 0x0024);
		/** <i>native declaration : include\PixelType.h:119</i> */
		public static final int PixelType_Gvsp_Jpeg = (0x80000000 | ((24) << 16) | 0x0001);
		/**
		 * 0x026000C0<br>
		 * <i>native declaration : include\PixelType.h:121</i>
		 */
		public static final int PixelType_Gvsp_Coord3D_ABC32f = (0x02000000 | ((96) << 16) | 0x00C0);
		/**
		 * 0x026000C1<br>
		 * <i>native declaration : include\PixelType.h:122</i>
		 */
		public static final int PixelType_Gvsp_Coord3D_ABC32f_Planar = (0x02000000 | ((96) << 16) | 0x00C1);
		/** <i>native declaration : include\PixelType.h:125</i> */
		public static final int PixelType_Gvsp_Coord3D_AC32f = (0x02000000 | ((40) << 16) | 0x00C2);
		/** <i>native declaration : include\PixelType.h:127</i> */
		public static final int PixelType_Gvsp_COORD3D_DEPTH_PLUS_MASK = (0x80000000 | 0x02000000 | ((28) << 16) | 0x0001);
		/**
		 * 0x82603001<br>
		 * <i>native declaration : include\PixelType.h:129</i>
		 */
		public static final int PixelType_Gvsp_Coord3D_ABC32 = (0x80000000 | 0x02000000 | ((96) << 16) | 0x3001);
		/**
		 * 0x82403002<br>
		 * <i>native declaration : include\PixelType.h:130</i>
		 */
		public static final int PixelType_Gvsp_Coord3D_AB32f = (0x80000000 | 0x02000000 | ((64) << 16) | 0x3002);
		/**
		 * 0x82403003<br>
		 * <i>native declaration : include\PixelType.h:131</i>
		 */
		public static final int PixelType_Gvsp_Coord3D_AB32 = (0x80000000 | 0x02000000 | ((64) << 16) | 0x3003);
		/**
		 * 0x024000C2<br>
		 * <i>native declaration : include\PixelType.h:132</i>
		 */
		public static final int PixelType_Gvsp_Coord3D_AC32f_64 = (0x02000000 | ((64) << 16) | 0x00C2);
		/**
		 * 0x024000C3<br>
		 * <i>native declaration : include\PixelType.h:133</i>
		 */
		public static final int PixelType_Gvsp_Coord3D_AC32f_Planar = (0x02000000 | ((64) << 16) | 0x00C3);
		/**
		 * 0x82403004<br>
		 * <i>native declaration : include\PixelType.h:134</i>
		 */
		public static final int PixelType_Gvsp_Coord3D_AC32 = (0x80000000 | 0x02000000 | ((64) << 16) | 0x3004);
		/**
		 * 0x012000BD<br>
		 * <i>native declaration : include\PixelType.h:135</i>
		 */
		public static final int PixelType_Gvsp_Coord3D_A32f = (0x01000000 | ((32) << 16) | 0x00BD);
		/**
		 * 0x81203005<br>
		 * <i>native declaration : include\PixelType.h:136</i>
		 */
		public static final int PixelType_Gvsp_Coord3D_A32 = (0x80000000 | 0x01000000 | ((32) << 16) | 0x3005);
		/**
		 * 0x012000BF<br>
		 * <i>native declaration : include\PixelType.h:137</i>
		 */
		public static final int PixelType_Gvsp_Coord3D_C32f = (0x01000000 | ((32) << 16) | 0x00BF);
		/**
		 * 0x81203006<br>
		 * <i>native declaration : include\PixelType.h:138</i>
		 */
		public static final int PixelType_Gvsp_Coord3D_C32 = (0x80000000 | 0x01000000 | ((32) << 16) | 0x3006);
		/**
		 * 0x023000B9<br>
		 * <i>native declaration : include\PixelType.h:140</i>
		 */
		public static final int PixelType_Gvsp_Coord3D_ABC16 = (0x02000000 | ((48) << 16) | 0x00B9);
	};
	/**
	 * ch:\u4fdd\u5b58\u56fe\u7247\u683c\u5f0f | en:Save image type<br>
	 * <i>native declaration : include\CameraParams.h:226</i><br>
	 * enum values
	 */
	public static interface MV_SAVE_IAMGE_TYPE {
		/** <i>native declaration : include\CameraParams.h:228</i> */
		public static final int MV_Image_Undefined = 0;
		/** <i>native declaration : include\CameraParams.h:229</i> */
		public static final int MV_Image_Bmp = 1;
		/** <i>native declaration : include\CameraParams.h:230</i> */
		public static final int MV_Image_Jpeg = 2;
		/**
		 * ch:\u4e0d\u652f\u6301 | en:Not support<br>
		 * <i>native declaration : include\CameraParams.h:231</i>
		 */
		public static final int MV_Image_Png = 3;
		/**
		 * ch:\u4e0d\u652f\u6301 | en:Not support<br>
		 * <i>native declaration : include\CameraParams.h:232</i>
		 */
		public static final int MV_Image_Tif = 4;
	};
	/**
	 * <i>native declaration : include\CameraParams.h</i><br>
	 * enum values
	 */
	public static interface MV_RECORD_FORMAT_TYPE {
		/** <i>native declaration : include\CameraParams.h:292</i> */
		public static final int MV_FormatType_Undefined = 0;
		/** <i>native declaration : include\CameraParams.h:293</i> */
		public static final int MV_FormatType_AVI = 1;
	};
	/**
	 * <i>native declaration : include\CameraParams.h</i><br>
	 * enum values
	 */
	public static interface MV_CAM_ACQUISITION_MODE {
		/**
		 * ch:\u5355\u5e27\u6a21\u5f0f | en:Single Mode<br>
		 * <i>native declaration : include\CameraParams.h:329</i>
		 */
		public static final int MV_ACQ_MODE_SINGLE = 0;
		/**
		 * ch:\u591a\u5e27\u6a21\u5f0f | en:Multi Mode<br>
		 * <i>native declaration : include\CameraParams.h:330</i>
		 */
		public static final int MV_ACQ_MODE_MUTLI = 1;
		/**
		 * ch:\u6301\u7eed\u91c7\u96c6\u6a21\u5f0f | en:Continuous Mode<br>
		 * <i>native declaration : include\CameraParams.h:331</i>
		 */
		public static final int MV_ACQ_MODE_CONTINUOUS = 2;
	};
	/**
	 * <i>native declaration : include\CameraParams.h</i><br>
	 * enum values
	 */
	public static interface MV_CAM_GAIN_MODE {
		/**
		 * ch:\u5173\u95ed | en:Single Mode<br>
		 * <i>native declaration : include\CameraParams.h:338</i>
		 */
		public static final int MV_GAIN_MODE_OFF = 0;
		/**
		 * ch:\u4e00\u6b21 | en:Multi Mode<br>
		 * <i>native declaration : include\CameraParams.h:339</i>
		 */
		public static final int MV_GAIN_MODE_ONCE = 1;
		/**
		 * ch:\u8fde\u7eed | en:Continuous Mode<br>
		 * <i>native declaration : include\CameraParams.h:340</i>
		 */
		public static final int MV_GAIN_MODE_CONTINUOUS = 2;
	};
	/**
	 * <i>native declaration : include\CameraParams.h</i><br>
	 * enum values
	 */
	public static interface MV_CAM_EXPOSURE_MODE {
		/**
		 * Timed<br>
		 * <i>native declaration : include\CameraParams.h:347</i>
		 */
		public static final int MV_EXPOSURE_MODE_TIMED = 0;
		/**
		 * TriggerWidth<br>
		 * <i>native declaration : include\CameraParams.h:348</i>
		 */
		public static final int MV_EXPOSURE_MODE_TRIGGER_WIDTH = 1;
	};
	/**
	 * <i>native declaration : include\CameraParams.h</i><br>
	 * enum values
	 */
	public static interface MV_CAM_EXPOSURE_AUTO_MODE {
		/**
		 * ch:\u5173\u95ed | en:Off<br>
		 * <i>native declaration : include\CameraParams.h:354</i>
		 */
		public static final int MV_EXPOSURE_AUTO_MODE_OFF = 0;
		/**
		 * ch:\u4e00\u6b21 | en:Once<br>
		 * <i>native declaration : include\CameraParams.h:355</i>
		 */
		public static final int MV_EXPOSURE_AUTO_MODE_ONCE = 1;
		/**
		 * ch:\u8fde\u7eed | en:Continuous<br>
		 * <i>native declaration : include\CameraParams.h:356</i>
		 */
		public static final int MV_EXPOSURE_AUTO_MODE_CONTINUOUS = 2;
	};
	/**
	 * <i>native declaration : include\CameraParams.h</i><br>
	 * enum values
	 */
	public static interface MV_CAM_TRIGGER_MODE {
		/**
		 * ch:\u5173\u95ed | en:Off<br>
		 * <i>native declaration : include\CameraParams.h:362</i>
		 */
		public static final int MV_TRIGGER_MODE_OFF = 0;
		/**
		 * ch:\u6253\u5f00 | en:ON<br>
		 * <i>native declaration : include\CameraParams.h:363</i>
		 */
		public static final int MV_TRIGGER_MODE_ON = 1;
	};
	/**
	 * <i>native declaration : include\CameraParams.h</i><br>
	 * enum values
	 */
	public static interface MV_CAM_GAMMA_SELECTOR {
		/** <i>native declaration : include\CameraParams.h:369</i> */
		public static final int MV_GAMMA_SELECTOR_USER = 1;
		/** <i>native declaration : include\CameraParams.h:370</i> */
		public static final int MV_GAMMA_SELECTOR_SRGB = 2;
	};
	/**
	 * <i>native declaration : include\CameraParams.h</i><br>
	 * enum values
	 */
	public static interface MV_CAM_BALANCEWHITE_AUTO {
		/** <i>native declaration : include\CameraParams.h:376</i> */
		public static final int MV_BALANCEWHITE_AUTO_OFF = 0;
		/** <i>native declaration : include\CameraParams.h:377</i> */
		public static final int MV_BALANCEWHITE_AUTO_ONCE = 2;
		/**
		 * ch:\u8fde\u7eed | en:Continuous<br>
		 * <i>native declaration : include\CameraParams.h:378</i>
		 */
		public static final int MV_BALANCEWHITE_AUTO_CONTINUOUS = 1;
	};
	/**
	 * <i>native declaration : include\CameraParams.h</i><br>
	 * enum values
	 */
	public static interface MV_CAM_TRIGGER_SOURCE {
		/** <i>native declaration : include\CameraParams.h:384</i> */
		public static final int MV_TRIGGER_SOURCE_LINE0 = 0;
		/** <i>native declaration : include\CameraParams.h:385</i> */
		public static final int MV_TRIGGER_SOURCE_LINE1 = 1;
		/** <i>native declaration : include\CameraParams.h:386</i> */
		public static final int MV_TRIGGER_SOURCE_LINE2 = 2;
		/** <i>native declaration : include\CameraParams.h:387</i> */
		public static final int MV_TRIGGER_SOURCE_LINE3 = 3;
		/** <i>native declaration : include\CameraParams.h:388</i> */
		public static final int MV_TRIGGER_SOURCE_COUNTER0 = 4;
		/** <i>native declaration : include\CameraParams.h:390</i> */
		public static final int MV_TRIGGER_SOURCE_SOFTWARE = 7;
		/** <i>native declaration : include\CameraParams.h:391</i> */
		public static final int MV_TRIGGER_SOURCE_FrequencyConverter = 8;
	};
	/**
	 * <i>native declaration : include\CameraParams.h</i><br>
	 * enum values
	 */
	public static interface MV_GIGE_TRANSMISSION_TYPE {
		/**
		 * ch:\u8868\u793a\u5355\u64ad(\u9ed8\u8ba4) | en:Unicast mode<br>
		 * <i>native declaration : include\CameraParams.h:397</i>
		 */
		public static final int MV_GIGE_TRANSTYPE_UNICAST = 0x0;
		/**
		 * ch:\u8868\u793a\u7ec4\u64ad | en:Multicast mode<br>
		 * <i>native declaration : include\CameraParams.h:398</i>
		 */
		public static final int MV_GIGE_TRANSTYPE_MULTICAST = 0x1;
		/**
		 * ch:\u8868\u793a\u5c40\u57df\u7f51\u5185\u5e7f\u64ad\uff0c\u6682\u4e0d\u652f\u6301 | en:Limited broadcast mode,not support<br>
		 * <i>native declaration : include\CameraParams.h:399</i>
		 */
		public static final int MV_GIGE_TRANSTYPE_LIMITEDBROADCAST = 0x2;
		/**
		 * ch:\u8868\u793a\u5b50\u7f51\u5185\u5e7f\u64ad\uff0c\u6682\u4e0d\u652f\u6301 | en:Subnet broadcast mode,not support<br>
		 * <i>native declaration : include\CameraParams.h:400</i>
		 */
		public static final int MV_GIGE_TRANSTYPE_SUBNETBROADCAST = 0x3;
		/**
		 * ch:\u8868\u793a\u4ece\u76f8\u673a\u83b7\u53d6\uff0c\u6682\u4e0d\u652f\u6301 | en:Transtype from camera,not support<br>
		 * <i>native declaration : include\CameraParams.h:401</i>
		 */
		public static final int MV_GIGE_TRANSTYPE_CAMERADEFINED = 0x4;
		/**
		 * ch:\u8868\u793a\u7528\u6237\u81ea\u5b9a\u4e49\u5e94\u7528\u7aef\u63a5\u6536\u56fe\u50cf\u6570\u636ePort\u53f7 | en:User Defined Receive Data Port<br>
		 * <i>native declaration : include\CameraParams.h:402</i>
		 */
		public static final int MV_GIGE_TRANSTYPE_UNICAST_DEFINED_PORT = 0x5;
		/**
		 * ch:\u8868\u793a\u8bbe\u7f6e\u4e86\u5355\u64ad\uff0c\u4f46\u672c\u5b9e\u4f8b\u4e0d\u63a5\u6536\u56fe\u50cf\u6570\u636e | en:Unicast without receive data<br>
		 * <i>native declaration : include\CameraParams.h:403</i>
		 */
		public static final int MV_GIGE_TRANSTYPE_UNICAST_WITHOUT_RECV = 0x00010000;
		/**
		 * ch:\u8868\u793a\u7ec4\u64ad\u6a21\u5f0f\uff0c\u4f46\u672c\u5b9e\u4f8b\u4e0d\u63a5\u6536\u56fe\u50cf\u6570\u636e | en:Multicast without receive data<br>
		 * <i>native declaration : include\CameraParams.h:404</i>
		 */
		public static final int MV_GIGE_TRANSTYPE_MULTICAST_WITHOUT_RECV = 0x00010001;
	};
	/**
	 * ch:\u6bcf\u4e2a\u8282\u70b9\u5bf9\u5e94\u7684\u63a5\u53e3\u7c7b\u578b | en:Interface type corresponds to each node<br>
	 * <i>native declaration : include\CameraParams.h:543</i><br>
	 * enum values
	 */

	/** <i>native declaration : include\PixelType.h</i> */
	public static final int MV_GVSP_PIX_MONO = (int)0x01000000;
	/** <i>native declaration : include\PixelType.h</i> */
	public static final int MV_GVSP_PIX_RGB = (int)0x02000000;
	/** <i>native declaration : include\PixelType.h</i> */
	public static final int MV_GVSP_PIX_COLOR = (int)0x02000000;
	/** <i>native declaration : include\PixelType.h</i> */
	public static final int MV_GVSP_PIX_CUSTOM = (int)0x80000000;
	/** <i>native declaration : include\PixelType.h</i> */
	public static final int MV_GVSP_PIX_COLOR_MASK = (int)0xFF000000;
	/** <i>native declaration : include\PixelType.h</i> */
	public static final int MV_GVSP_PIX_EFFECTIVE_PIXEL_SIZE_MASK = (int)0x00FF0000;
	/** <i>native declaration : include\PixelType.h</i> */
	public static final int MV_GVSP_PIX_EFFECTIVE_PIXEL_SIZE_SHIFT = (int)16;
	/** <i>native declaration : include\PixelType.h</i> */
	public static final int MV_GVSP_PIX_ID_MASK = (int)0x0000FFFF;
	/** <i>native declaration : include\PixelType.h</i> */
	public static final int MV_GVSP_PIX_COUNT = (int)0x46;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_UNKNOW_DEVICE = (int)0x00000000;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_GIGE_DEVICE = (int)0x00000001;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_1394_DEVICE = (int)0x00000002;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_USB_DEVICE = (int)0x00000004;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_CAMERALINK_DEVICE = (int)0x00000008;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int INFO_MAX_BUFFER_SIZE = (int)64;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_MAX_TLS_NUM = (int)8;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_MAX_DEVICE_NUM = (int)256;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_IP_CFG_STATIC = (int)0x05000000;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_IP_CFG_DHCP = (int)0x06000000;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_IP_CFG_LLA = (int)0x04000000;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_NET_TRANS_DRIVER = (int)0x00000001;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_NET_TRANS_SOCKET = (int)0x00000002;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_CAML_BAUDRATE_9600 = (int)0x00000001;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_CAML_BAUDRATE_19200 = (int)0x00000002;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_CAML_BAUDRATE_38400 = (int)0x00000004;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_CAML_BAUDRATE_57600 = (int)0x00000008;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_CAML_BAUDRATE_115200 = (int)0x00000010;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_CAML_BAUDRATE_230400 = (int)0x00000020;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_CAML_BAUDRATE_460800 = (int)0x00000040;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_CAML_BAUDRATE_921600 = (int)0x00000080;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_CAML_BAUDRATE_AUTOMAX = (int)0x40000000;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_MATCH_TYPE_NET_DETECT = (int)0x00000001;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_MATCH_TYPE_USB_DETECT = (int)0x00000002;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_MAX_XML_NODE_NUM_C = (int)128;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_MAX_XML_NODE_STRLEN_C = (int)64;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_MAX_XML_STRVALUE_STRLEN_C = (int)64;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_MAX_XML_DISC_STRLEN_C = (int)512;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_MAX_XML_ENTRY_NUM = (int)10;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_MAX_XML_PARENTS_NUM = (int)8;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_MAX_XML_SYMBOLIC_STRLEN_C = (int)64;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_MAX_XML_SYMBOLIC_NUM = (int)64;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_EXCEPTION_DEV_DISCONNECT = (int)0x00008001;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_EXCEPTION_VERSION_CHECK = (int)0x00008002;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_ACCESS_Exclusive = (int)1;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_ACCESS_ExclusiveWithSwitch = (int)2;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_ACCESS_Control = (int)3;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_ACCESS_ControlWithSwitch = (int)4;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_ACCESS_ControlSwitchEnable = (int)5;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_ACCESS_ControlSwitchEnableWithKey = (int)6;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MV_ACCESS_Monitor = (int)7;
	/** <i>native declaration : include\CameraParams.h</i> */
	public static final int MAX_EVENT_NAME_SIZE = (int)128;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_OK = (int)0x00000000;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_HANDLE = (int)0x80000000;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_SUPPORT = (int)0x80000001;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_BUFOVER = (int)0x80000002;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_CALLORDER = (int)0x80000003;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_PARAMETER = (int)0x80000004;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_RESOURCE = (int)0x80000006;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_NODATA = (int)0x80000007;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_PRECONDITION = (int)0x80000008;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_VERSION = (int)0x80000009;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_NOENOUGH_BUF = (int)0x8000000A;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_ABNORMAL_IMAGE = (int)0x8000000B;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_LOAD_LIBRARY = (int)0x8000000C;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_NOOUTBUF = (int)0x8000000D;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_UNKNOW = (int)0x800000FF;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_GC_GENERIC = (int)0x80000100;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_GC_ARGUMENT = (int)0x80000101;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_GC_RANGE = (int)0x80000102;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_GC_PROPERTY = (int)0x80000103;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_GC_RUNTIME = (int)0x80000104;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_GC_LOGICAL = (int)0x80000105;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_GC_ACCESS = (int)0x80000106;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_GC_TIMEOUT = (int)0x80000107;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_GC_DYNAMICCAST = (int)0x80000108;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_GC_UNKNOW = (int)0x800001FF;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_NOT_IMPLEMENTED = (int)0x80000200;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_INVALID_ADDRESS = (int)0x80000201;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_WRITE_PROTECT = (int)0x80000202;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_ACCESS_DENIED = (int)0x80000203;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_BUSY = (int)0x80000204;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_PACKET = (int)0x80000205;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_NETER = (int)0x80000206;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_IP_CONFLICT = (int)0x80000221;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_USB_READ = (int)0x80000300;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_USB_WRITE = (int)0x80000301;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_USB_DEVICE = (int)0x80000302;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_USB_GENICAM = (int)0x80000303;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_USB_BANDWIDTH = (int)0x80000304;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_USB_DRIVER = (int)0x80000305;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_USB_UNKNOW = (int)0x800003FF;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_UPG_FILE_MISMATCH = (int)0x80000400;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_UPG_LANGUSGE_MISMATCH = (int)0x80000401;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_UPG_CONFLICT = (int)0x80000402;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_UPG_INNER_ERR = (int)0x80000403;
	/** <i>native declaration : include\MvErrorDefine.h</i> */
	public static final int MV_E_UPG_UNKNOW = (int)0x800004FF;
	/** <i>native declaration : include\MvCameraControl.h:237</i> */
	public interface MV_CC_RegisterImageCallBackEx_cbOutput_callback extends Callback {
		void apply(Pointer pData, MV_FRAME_OUT_INFO_EX pFrameInfo, Pointer pUser);
	};
	/** <i>native declaration : include\MvCameraControl.h:256</i> */
	public interface MV_CC_RegisterImageCallBackForRGB_cbOutput_callback extends Callback {
		void apply(Pointer pData, MV_FRAME_OUT_INFO_EX pFrameInfo, Pointer pUser);
	};
	/** <i>native declaration : include\MvCameraControl.h:275</i> */
	public interface MV_CC_RegisterImageCallBackForBGR_cbOutput_callback extends Callback {
		void apply(Pointer pData, MV_FRAME_OUT_INFO_EX pFrameInfo, Pointer pUser);
	};
	/** <i>native declaration : include\MvCameraControl.h:2051</i> */
	public interface MV_CC_RegisterExceptionCallBack_cbException_callback extends Callback {
		void apply(int nMsgType, Pointer pUser);
	};
	/** <i>native declaration : include\MvCameraControl.h:2070</i> */
	public interface MV_CC_RegisterAllEventCallBack_cbEvent_callback extends Callback {
		void apply(MV_EVENT_OUT_INFO pEventInfo, Pointer pUser);
	};
	/** <i>native declaration : include\MvCameraControl.h:2085</i> */
	public interface MV_CC_RegisterEventCallBackEx_cbEvent_callback extends Callback {
		void apply(MV_EVENT_OUT_INFO pEventInfo, Pointer pUser);
	};

	/** <i>native declaration : include\MvCameraControl.h:2810</i> */
	public interface MV_CC_RegisterImageCallBack_cbOutput_callback extends Callback {
		void apply(Pointer pData, MV_FRAME_OUT_INFO pFrameInfo, Pointer pUser);
	};
	/** <i>native declaration : include\MvCameraControl.h:2875</i> */
	public interface MV_CC_RegisterEventCallBack_cbEvent_callback extends Callback {
		void apply(int nExternalEventId, Pointer pUser);
	};
	/**
	 * @fn     MV_CC_GetSDKVersion()
<br>
	 *  @brief  \u83b7\u53d6SDK\u7248\u672c\u53f7
<br>
	 *  @param  
<br>
	 *  @return \u59cb\u7ec8\u8fd4\u56de4\u5b57\u8282\u7248\u672c\u53f7 |\u4e3b    |\u6b21    |\u4fee\u6b63  |  \u6d4b\u8bd5|
<br>
	 * 8bits  8bits  8bits  8bits 
<br>
	 *  @fn     MV_CC_GetSDKVersion()
<br>
	 *  @brief  Get SDK Version
<br>
	 *  @param  
<br>
	 *  @return Always return 4 Bytes of version number |Main    |Sub    |Rev  |  Test|
<br>
	 * 8bits  8bits  8bits  8bits 
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetSDKVersion()</code><br>
	 * <i>native declaration : include\MvCameraControl.h:58</i>
	 */
	int MV_CC_GetSDKVersion();
	/**
	 * @fn     MV_CC_EnumerateTls()
<br>
	 *  @brief  \u83b7\u53d6\u652f\u6301\u7684\u4f20\u8f93\u5c42
<br>
	 *  @return \u652f\u6301\u7684\u4f20\u8f93\u5c42\u7f16\u53f7 
<br>
	 *  @fn     MV_CC_EnumerateTls()
<br>
	 *  @brief  Get supported Transport Layer
<br>
	 *  @return Supported Transport Layer number
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_EnumerateTls()</code><br>
	 * <i>native declaration : include\MvCameraControl.h:69</i>
	 */
	int MV_CC_EnumerateTls();
	/**
	 * @fn     MV_CC_EnumDevices()
<br>
	 *  @brief  \u679a\u4e3e\u8bbe\u5907
<br>
	 *  @param  nTLayerType            [IN]           \u679a\u4e3e\u4f20\u8f93\u5c42
<br>
	 *  @param  pstDevList             [OUT]          \u8bbe\u5907\u5217\u8868
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_EnumDevices()
<br>
	 *  @brief  Enumerate Device
<br>
	 *  @param  nTLayerType            [IN]           Enumerate TLs
<br>
	 *  @param  pstDevList             [OUT]          Device List
<br>
	 *  @return Success, return MV_OK. Failure, return error code 
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_EnumDevices(unsigned int, MV_CC_DEVICE_INFO_LIST*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:84</i>
	 */
	int MV_CC_EnumDevices(int nTLayerType, MV_CC_DEVICE_INFO_LIST pstDevList);
	/**
	 * @fn     MV_CC_EnumDevicesEx()
<br>
	 *  @brief  \u6839\u636e\u5382\u5546\u540d\u5b57\u679a\u4e3e\u8bbe\u5907
<br>
	 *  @param  nTLayerType            [IN]           \u679a\u4e3e\u4f20\u8f93\u5c42
<br>
	 *  @param  pstDevList             [OUT]          \u8bbe\u5907\u5217\u8868
<br>
	 *  @param  pManufacturerName      [IN]           \u5382\u5546\u540d\u5b57
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_EnumDevicesEx()
<br>
	 *  @brief  Enumerate device according to manufacture name
<br>
	 *  @param  nTLayerType            [IN]           Transmission layer of enumeration
<br>
	 *  @param  pstDevList             [OUT]          Device list
<br>
	 *  @param  pManufacturerName      [IN]           Manufacture Name
<br>
	 *  @return Success, return MV_OK. Failure, return error code 
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_EnumDevicesEx(unsigned int, MV_CC_DEVICE_INFO_LIST*, const char*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:101</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_EnumDevicesEx(int, MV_CC_DEVICE_INFO_LIST, String)} and {@link #MV_CC_EnumDevicesEx(int, MV_CC_DEVICE_INFO_LIST, Pointer)} instead
	 */
	@Deprecated 
	int MV_CC_EnumDevicesEx(int nTLayerType, MV_CC_DEVICE_INFO_LIST pstDevList, Pointer pManufacturerName);
	/**
	 * @fn     MV_CC_EnumDevicesEx()
<br>
	 *  @brief  \u6839\u636e\u5382\u5546\u540d\u5b57\u679a\u4e3e\u8bbe\u5907
<br>
	 *  @param  nTLayerType            [IN]           \u679a\u4e3e\u4f20\u8f93\u5c42
<br>
	 *  @param  pstDevList             [OUT]          \u8bbe\u5907\u5217\u8868
<br>
	 *  @param  pManufacturerName      [IN]           \u5382\u5546\u540d\u5b57
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_EnumDevicesEx()
<br>
	 *  @brief  Enumerate device according to manufacture name
<br>
	 *  @param  nTLayerType            [IN]           Transmission layer of enumeration
<br>
	 *  @param  pstDevList             [OUT]          Device list
<br>
	 *  @param  pManufacturerName      [IN]           Manufacture Name
<br>
	 *  @return Success, return MV_OK. Failure, return error code 
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_EnumDevicesEx(unsigned int, MV_CC_DEVICE_INFO_LIST*, const char*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:101</i>
	 */
	int MV_CC_EnumDevicesEx(int nTLayerType, MV_CC_DEVICE_INFO_LIST pstDevList, String pManufacturerName);
	/**
	 * @fn     MV_CC_IsDeviceAccessible()
<br>
	 *  @brief  \u8bbe\u5907\u662f\u5426\u53ef\u8fbe
<br>
	 *  @param  pstDevInfo             [IN]           \u8bbe\u5907\u4fe1\u606f\u7ed3\u6784\u4f53
<br>
	 *  @param  nAccessMode            [IN]           \u8bbf\u95ee\u6743\u9650
<br>
	 *  @return \u53ef\u8fbe\uff0c\u8fd4\u56detrue\uff1b\u4e0d\u53ef\u8fbe\uff0c\u8fd4\u56defalse 
<br>
	 *  @fn     MV_CC_IsDeviceAccessible()
<br>
	 *  @brief  Is the device accessible
<br>
	 *  @param  pstDevInfo             [IN]           Device Information Structure
<br>
	 *  @param  nAccessMode            [IN]           Access Right
<br>
	 *  @return Access, return true. Not access, return false
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>bool MV_CC_IsDeviceAccessible(MV_CC_DEVICE_INFO*, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:116</i>
	 */
	byte MV_CC_IsDeviceAccessible(MV_CC_DEVICE_INFO pstDevInfo, int nAccessMode);
	/**
	 * @fn     MV_CC_SetSDKLogPath()
<br>
	 *  @brief  \u8bbe\u7f6eSDK\u65e5\u5fd7\u8def\u5f84\uff08\u5982\u679c\u65e5\u5fd7\u670d\u52a1MvLogServer\u5df2\u542f\u7528\uff0c\u5219\u8be5\u63a5\u53e3\u65e0\u6548\uff09
<br>
	 *  @param  pSDKLogPath             [IN]           SDK\u65e5\u5fd7\u8def\u5f84
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_SetSDKLogPath()
<br>
	 *  @brief  Set SDK log path
<br>
	 *  @param  pSDKLogPath             [IN]           SDK log path
<br>
	 *  @return Access, return true. Not access, return false
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetSDKLogPath(const char*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:129</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_SetSDKLogPath(String)} and {@link #MV_CC_SetSDKLogPath(Pointer)} instead
	 */
	@Deprecated 
	int MV_CC_SetSDKLogPath(Pointer pSDKLogPath);
	/**
	 * @fn     MV_CC_SetSDKLogPath()
<br>
	 *  @brief  \u8bbe\u7f6eSDK\u65e5\u5fd7\u8def\u5f84\uff08\u5982\u679c\u65e5\u5fd7\u670d\u52a1MvLogServer\u5df2\u542f\u7528\uff0c\u5219\u8be5\u63a5\u53e3\u65e0\u6548\uff09
<br>
	 *  @param  pSDKLogPath             [IN]           SDK\u65e5\u5fd7\u8def\u5f84
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_SetSDKLogPath()
<br>
	 *  @brief  Set SDK log path
<br>
	 *  @param  pSDKLogPath             [IN]           SDK log path
<br>
	 *  @return Access, return true. Not access, return false
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetSDKLogPath(const char*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:129</i>
	 */
	int MV_CC_SetSDKLogPath(String pSDKLogPath);
	/**
	 * @fn     MV_CC_CreateHandle()
<br>
	 *  @brief  \u521b\u5efa\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  handle                 [OUT]          \u53e5\u67c4\u5730\u5740
<br>
	 *  @param  pstDevInfo             [IN]           \u8bbe\u5907\u4fe1\u606f\u7ed3\u6784\u4f53
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_CreateHandle()
<br>
	 *  @brief  Create Device Handle
<br>
	 *  @param  handle                 [OUT]          Handle Address
<br>
	 *  @param  pstDevInfo             [IN]           Device Information Structure
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_CreateHandle(void**, const MV_CC_DEVICE_INFO*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:144</i>
	 */
	int MV_CC_CreateHandle(PointerByReference handle, MV_CC_DEVICE_INFO pstDevInfo);
	/**
	 * @fn     MV_CC_CreateHandleWithoutLog
<br>
	 *  @brief  \u521b\u5efa\u8bbe\u5907\u53e5\u67c4\uff0c\u4e0d\u751f\u6210\u65e5\u5fd7
<br>
	 *  @param  handle                 [OUT]          \u53e5\u67c4\u5730\u5740
<br>
	 *  @param  pstDevInfo             [IN]           \u8bbe\u5907\u4fe1\u606f\u7ed3\u6784\u4f53
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_CreateHandleWithoutLog
<br>
	 *  @brief  Create Device Handle without log
<br>
	 *  @param  handle                 [OUT]          Handle Address
<br>
	 *  @param  pstDevInfo             [IN]           Device Information Structure
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_CreateHandleWithoutLog(void**, const MV_CC_DEVICE_INFO*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:159</i>
	 */
	int MV_CC_CreateHandleWithoutLog(PointerByReference handle, MV_CC_DEVICE_INFO pstDevInfo);
	/**
	 * @fn     MV_CC_DestroyHandle()
<br>
	 *  @brief  \u9500\u6bc1\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  handle                 [IN]          \u53e5\u67c4
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_DestroyHandle()
<br>
	 *  @brief  Destroy Device Handle
<br>
	 *  @param  handle                 [IN]          Handle
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_DestroyHandle(void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:172</i>
	 */
	int MV_CC_DestroyHandle(Pointer handle);
	/**
	 * @fn     MV_CC_OpenDevice()
<br>
	 *  @brief  \u6253\u5f00\u8bbe\u5907
<br>
	 *  @param  handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param  nAccessMode            [IN]          \u8bbf\u95ee\u6743\u9650
<br>
	 *  @param  nSwitchoverKey         [IN]          \u5207\u6362\u8bbf\u95ee\u6743\u9650\u65f6\u7684\u5bc6\u94a5
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_OpenDevice()
<br>
	 *  @brief  Open Device
<br>
	 *  @param  handle                 [IN]          Handle
<br>
	 *  @param  nAccessMode            [IN]          Access Right
<br>
	 *  @param  nSwitchoverKey         [IN]          Switch key of access right
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_OpenDevice(void*, unsigned int, unsigned short)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:192</i>
	 */
	int MV_CC_OpenDevice(Pointer handle, int nAccessMode, short nSwitchoverKey);
	/**
	 * @fn         MV_CC_CloseDevice
<br>
	 *  @brief      \u5173\u95ed\u76f8\u673a
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_CloseDevice
<br>
	 *  @brief      Close Device
<br>
	 *  @param      handle                 [IN]          Handle
<br>
	 *  @return     Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_CloseDevice(void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:206</i>
	 */
	int MV_CC_CloseDevice(Pointer handle);
	/**
	 * @fn         MV_CC_IsDeviceConnected
<br>
	 *  @brief      \u5224\u65ad\u76f8\u673a\u662f\u5426\u5904\u4e8e\u8fde\u63a5\u72b6\u6001
<br>
	 *  @param      handle                 [IN]          \u53e5\u67c4
<br>
	 *  @return     \u8bbe\u5907\u5904\u4e8e\u8fde\u63a5\u72b6\u6001\uff0c\u8fd4\u56detrue\uff1b\u6ca1\u8fde\u63a5\u6216\u5931\u53bb\u8fde\u63a5\uff0c\u8fd4\u56defalse
<br>
	 *  @fn         MV_CC_IsDeviceConnected
<br>
	 *  @brief      Is The Device Connected
<br>
	 *  @param      handle                 [IN]          Handle
<br>
	 *  @return     Connected, return true. Not Connected or DIsconnected, return false
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>bool MV_CC_IsDeviceConnected(void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:219</i>
	 */
	byte MV_CC_IsDeviceConnected(Pointer handle);
	/**
	 * @fn         MV_CC_RegisterImageCallBackEx
<br>
	 *  @brief      \u6ce8\u518c\u56fe\u50cf\u6570\u636e\u56de\u8c03\uff0cchunk
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param       cbOutput               [IN]          \u56de\u8c03\u51fd\u6570\u6307\u9488
<br>
	 *  @param       pUser                  [IN]          \u7528\u6237\u81ea\u5b9a\u4e49\u53d8\u91cf
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_RegisterImageCallBackEx
<br>
	 *  @brief      register image data callback, chunk
<br>
	 *  @param       handle                 [IN]          Handle
<br>
	 *  @param       cbOutput               [IN]          Callback function pointer
<br>
	 *  @param       pUser                  [IN]          User defined variable
<br>
	 *  @return      Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_RegisterImageCallBackEx(void*, MV_CC_RegisterImageCallBackEx_cbOutput_callback*, void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:236</i>
	 */
	int MV_CC_RegisterImageCallBackEx(Pointer handle, MV_CC_RegisterImageCallBackEx_cbOutput_callback cbOutput, Pointer pUser);
	/**
	 * @fn         MV_CC_RegisterImageCallbackForRGB
<br>
	 *  @brief      \u6ce8\u518c\u56fe\u50cf\u6570\u636e\u56de\u8c03\uff0cRGB
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param       cbOutput               [IN]          \u56de\u8c03\u51fd\u6570\u6307\u9488
<br>
	 *  @param       pUser                  [IN]          \u7528\u6237\u81ea\u5b9a\u4e49\u53d8\u91cf
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_RegisterImageCallbackForRGB
<br>
	 *  @brief      register image data callback, RGB
<br>
	 *  @param       handle                 [IN]          Handle
<br>
	 *  @param       cbOutput               [IN]          Callback function pointer
<br>
	 *  @param       pUser                  [IN]          User defined variable
<br>
	 *  @return      Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_RegisterImageCallBackForRGB(void*, MV_CC_RegisterImageCallBackForRGB_cbOutput_callback*, void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:255</i>
	 */
	int MV_CC_RegisterImageCallBackForRGB(Pointer handle, MV_CC_RegisterImageCallBackForRGB_cbOutput_callback cbOutput, Pointer pUser);
	/**
	 * @fn         MV_CC_RegisterImageCallbackForBGR
<br>
	 *  @brief      \u6ce8\u518c\u56fe\u50cf\u6570\u636e\u56de\u8c03\uff0cBGR
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param       cbOutput               [IN]          \u56de\u8c03\u51fd\u6570\u6307\u9488
<br>
	 *  @param       pUser                  [IN]          \u7528\u6237\u81ea\u5b9a\u4e49\u53d8\u91cf
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_RegisterImageCallbackForBGR
<br>
	 *  @brief      register image data callback, BGR
<br>
	 *  @param       handle                 [IN]          Handle
<br>
	 *  @param       cbOutput               [IN]          Callback function pointer
<br>
	 *  @param       pUser                  [IN]          User defined variable
<br>
	 *  @return      Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_RegisterImageCallBackForBGR(void*, MV_CC_RegisterImageCallBackForBGR_cbOutput_callback*, void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:274</i>
	 */
	int MV_CC_RegisterImageCallBackForBGR(Pointer handle, MV_CC_RegisterImageCallBackForBGR_cbOutput_callback cbOutput, Pointer pUser);
	/**
	 * @fn         MV_CC_StartGrabbing
<br>
	 *  @brief      \u5f00\u59cb\u53d6\u6d41
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_StartGrabbing
<br>
	 *  @brief      Start Grabbing
<br>
	 *  @param      handle                 [IN]          Handle
<br>
	 *  @return     Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_StartGrabbing(void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:289</i>
	 */
	int MV_CC_StartGrabbing(Pointer handle);
	/**
	 * @fn         MV_CC_StopGrabbing
<br>
	 *  @brief      \u505c\u6b62\u53d6\u6d41
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_StopGrabbing
<br>
	 *  @brief      Stop Grabbing
<br>
	 *  @param      handle                 [IN]          Handle
<br>
	 *  @return     Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_StopGrabbing(void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:302</i>
	 */
	int MV_CC_StopGrabbing(Pointer handle);
	/**
	 * @fn         MV_CC_GetImageForRGB
<br>
	 *  @brief      \u83b7\u53d6\u4e00\u5e27RGB\u6570\u636e\uff0c\u6b64\u51fd\u6570\u4e3a\u67e5\u8be2\u5f0f\u83b7\u53d6\uff0c\u6bcf\u6b21\u8c03\u7528\u67e5\u8be2\u5185\u90e8
<br>
	 * \u7f13\u5b58\u6709\u65e0\u6570\u636e\uff0c\u6709\u6570\u636e\u5219\u8303\u56f4\u6570\u636e\uff0c\u65e0\u6570\u636e\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param       pData                  [OUT]         \u56fe\u50cf\u6570\u636e\u63a5\u6536\u6307\u9488
<br>
	 *  @param       nDataSize              [IN]          \u63a5\u6536\u7f13\u5b58\u5927\u5c0f
<br>
	 *  @param       pFrameInfo             [OUT]         \u56fe\u50cf\u4fe1\u606f\u7ed3\u6784\u4f53
<br>
	 *  @param       nMsec                  [IN]          \u7b49\u5f85\u8d85\u65f6\u65f6\u95f4
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_GetImageForRGB
<br>
	 *  @brief      Get one frame of RGB data, this function is using query to get data, 
<br>
	 * query whether the internal cache has data, return data if there has, return error code if no data
<br>
	 *  @param       handle                 [IN]          Handle
<br>
	 *  @param       pData                  [OUT]         Recevied image data pointer
<br>
	 *  @param       nDataSize              [IN]          Recevied buffer size
<br>
	 *  @param       pFrameInfo             [OUT]         Image information structure
<br>
	 *  @param       nMsec                  [IN]          Waiting timeout
<br>
	 *  @return      Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetImageForRGB(void*, unsigned char*, unsigned int, MV_FRAME_OUT_INFO_EX*, int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:325</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_GetImageForRGB(Pointer, ByteBuffer, int, MV_FRAME_OUT_INFO_EX, int)} and {@link #MV_CC_GetImageForRGB(Pointer, Pointer, int, MV_FRAME_OUT_INFO_EX, int)} instead
	 */
	@Deprecated 
	int MV_CC_GetImageForRGB(Pointer handle, Pointer pData, int nDataSize, MV_FRAME_OUT_INFO_EX pFrameInfo, int nMsec);
	/**
	 * @fn         MV_CC_GetImageForRGB
<br>
	 *  @brief      \u83b7\u53d6\u4e00\u5e27RGB\u6570\u636e\uff0c\u6b64\u51fd\u6570\u4e3a\u67e5\u8be2\u5f0f\u83b7\u53d6\uff0c\u6bcf\u6b21\u8c03\u7528\u67e5\u8be2\u5185\u90e8
<br>
	 * \u7f13\u5b58\u6709\u65e0\u6570\u636e\uff0c\u6709\u6570\u636e\u5219\u8303\u56f4\u6570\u636e\uff0c\u65e0\u6570\u636e\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param       pData                  [OUT]         \u56fe\u50cf\u6570\u636e\u63a5\u6536\u6307\u9488
<br>
	 *  @param       nDataSize              [IN]          \u63a5\u6536\u7f13\u5b58\u5927\u5c0f
<br>
	 *  @param       pFrameInfo             [OUT]         \u56fe\u50cf\u4fe1\u606f\u7ed3\u6784\u4f53
<br>
	 *  @param       nMsec                  [IN]          \u7b49\u5f85\u8d85\u65f6\u65f6\u95f4
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_GetImageForRGB
<br>
	 *  @brief      Get one frame of RGB data, this function is using query to get data, 
<br>
	 * query whether the internal cache has data, return data if there has, return error code if no data
<br>
	 *  @param       handle                 [IN]          Handle
<br>
	 *  @param       pData                  [OUT]         Recevied image data pointer
<br>
	 *  @param       nDataSize              [IN]          Recevied buffer size
<br>
	 *  @param       pFrameInfo             [OUT]         Image information structure
<br>
	 *  @param       nMsec                  [IN]          Waiting timeout
<br>
	 *  @return      Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetImageForRGB(void*, unsigned char*, unsigned int, MV_FRAME_OUT_INFO_EX*, int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:325</i>
	 */
	int MV_CC_GetImageForRGB(Pointer handle, ByteBuffer pData, int nDataSize, MV_FRAME_OUT_INFO_EX pFrameInfo, int nMsec);
	/**
	 * @fn         MV_CC_GetImageForBGR
<br>
	 *  @brief      \u83b7\u53d6\u4e00\u5e27BGR\u6570\u636e\uff0c\u6b64\u51fd\u6570\u4e3a\u67e5\u8be2\u5f0f\u83b7\u53d6\uff0c\u6bcf\u6b21\u8c03\u7528\u67e5\u8be2\u5185\u90e8
<br>
	 * \u7f13\u5b58\u6709\u65e0\u6570\u636e\uff0c\u6709\u6570\u636e\u5219\u8303\u56f4\u6570\u636e\uff0c\u65e0\u6570\u636e\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param       pData                  [OUT]         \u56fe\u50cf\u6570\u636e\u63a5\u6536\u6307\u9488
<br>
	 *  @param       nDataSize              [IN]          \u63a5\u6536\u7f13\u5b58\u5927\u5c0f
<br>
	 *  @param       pFrameInfo             [OUT]         \u56fe\u50cf\u4fe1\u606f\u7ed3\u6784\u4f53
<br>
	 *  @param       nMsec                  [IN]          \u7b49\u5f85\u8d85\u65f6\u65f6\u95f4
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_GetImageForBGR
<br>
	 *  @brief      Get one frame of BGR data, this function is using query to get data, 
<br>
	 * query whether the internal cache has data, return data if there has, return error code if no data
<br>
	 *  @param       handle                 [IN]          Handle
<br>
	 *  @param       pData                  [OUT]         Recevied image data pointer
<br>
	 *  @param       nDataSize              [IN]          Recevied buffer size
<br>
	 *  @param       pFrameInfo             [OUT]         Image information structure
<br>
	 *  @param       nMsec                  [IN]          Waiting timeout
<br>
	 *  @return      Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetImageForBGR(void*, unsigned char*, unsigned int, MV_FRAME_OUT_INFO_EX*, int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:348</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_GetImageForBGR(Pointer, ByteBuffer, int, MV_FRAME_OUT_INFO_EX, int)} and {@link #MV_CC_GetImageForBGR(Pointer, Pointer, int, MV_FRAME_OUT_INFO_EX, int)} instead
	 */
	@Deprecated 
	int MV_CC_GetImageForBGR(Pointer handle, Pointer pData, int nDataSize, MV_FRAME_OUT_INFO_EX pFrameInfo, int nMsec);
	/**
	 * @fn         MV_CC_GetImageForBGR
<br>
	 *  @brief      \u83b7\u53d6\u4e00\u5e27BGR\u6570\u636e\uff0c\u6b64\u51fd\u6570\u4e3a\u67e5\u8be2\u5f0f\u83b7\u53d6\uff0c\u6bcf\u6b21\u8c03\u7528\u67e5\u8be2\u5185\u90e8
<br>
	 * \u7f13\u5b58\u6709\u65e0\u6570\u636e\uff0c\u6709\u6570\u636e\u5219\u8303\u56f4\u6570\u636e\uff0c\u65e0\u6570\u636e\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param       pData                  [OUT]         \u56fe\u50cf\u6570\u636e\u63a5\u6536\u6307\u9488
<br>
	 *  @param       nDataSize              [IN]          \u63a5\u6536\u7f13\u5b58\u5927\u5c0f
<br>
	 *  @param       pFrameInfo             [OUT]         \u56fe\u50cf\u4fe1\u606f\u7ed3\u6784\u4f53
<br>
	 *  @param       nMsec                  [IN]          \u7b49\u5f85\u8d85\u65f6\u65f6\u95f4
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_GetImageForBGR
<br>
	 *  @brief      Get one frame of BGR data, this function is using query to get data, 
<br>
	 * query whether the internal cache has data, return data if there has, return error code if no data
<br>
	 *  @param       handle                 [IN]          Handle
<br>
	 *  @param       pData                  [OUT]         Recevied image data pointer
<br>
	 *  @param       nDataSize              [IN]          Recevied buffer size
<br>
	 *  @param       pFrameInfo             [OUT]         Image information structure
<br>
	 *  @param       nMsec                  [IN]          Waiting timeout
<br>
	 *  @return      Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetImageForBGR(void*, unsigned char*, unsigned int, MV_FRAME_OUT_INFO_EX*, int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:348</i>
	 */
	int MV_CC_GetImageForBGR(Pointer handle, ByteBuffer pData, int nDataSize, MV_FRAME_OUT_INFO_EX pFrameInfo, int nMsec);
	/**
	 * @fn         MV_CC_GetImageBuffer
<br>
	 *  @brief      \u91c7\u7528\u8d85\u65f6\u673a\u5236\u83b7\u53d6\u4e00\u5e27\u56fe\u7247\uff0cSDK\u5185\u90e8\u7b49\u5f85\u76f4\u5230\u6709\u6570\u636e\u65f6\u8fd4\u56de\uff0c
<br>
	 * \u6b64\u63a5\u53e3\u53ef\u4ee5\u589e\u52a0\u53d6\u6d41\u5e73\u7a33\u6027\uff0c\u9002\u5408\u7528\u4e8e\u5bf9\u5e73\u7a33\u6027\u8981\u6c42\u8f83\u9ad8\u7684\u573a\u5408\uff08\u4e0eMV_CC_Display\u4e0d\u80fd\u540c\u65f6\u4f7f\u7528\uff09
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param       pFrame                 [OUT]         \u56fe\u50cf\u6570\u636e\u9996\u5730\u5740\u548c\u56fe\u50cf\u4fe1\u606f
<br>
	 *  @param       nMsec                  [IN]          \u7b49\u5f85\u8d85\u65f6\u65f6\u95f4\uff0c\u8f93\u5165INFINITE\u65f6\u8868\u793a\u65e0\u9650\u7b49\u5f85\uff0c\u76f4\u5230\u6536\u5230\u4e00\u5e27\u6570\u636e\u6216\u8005\u505c\u6b62\u53d6\u6d41
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_GetImageBuffer
<br>
	 *  @brief      Timeout mechanism is used to get image, and the SDK waits inside until the data is returned,
<br>
	 * this interface can increase the flow stability, and is suitable for occasions with higher stability requirements
<br>
	 *  @param       handle                 [IN]          Handle
<br>
	 *  @param       pFrame                 [OUT]         Pointer of recevied image data and info
<br>
	 *  @param       nMsec                  [IN]          Waiting timeout
<br>
	 *  @return      Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetImageBuffer(void*, MV_FRAME_OUT*, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:367</i>
	 */
	int MV_CC_GetImageBuffer(Pointer handle, MV_FRAME_OUT pFrame, int nMsec);
	/**
	 * @fn         MV_CC_FreeImageBuffer
<br>
	 *  @brief      \u91ca\u653e\u56fe\u50cf\u7f13\u5b58(\u6b64\u63a5\u53e3\u7528\u4e8e\u91ca\u653e\u4e0d\u518d\u4f7f\u7528\u7684\u56fe\u50cf\u7f13\u5b58\uff0c\u4e0eMV_CC_GetImageBuffer\u914d\u5957\u4f7f\u7528)
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param       pFrame                 [IN]          \u56fe\u50cf\u6570\u636e\u548c\u4fe1\u606f\u63a5\u6536\u6307\u9488
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_FreeImageBuffer
<br>
	 *  @brief      Free image buffer(this interface can free image buffer, used with MV_CC_GetImageBuffer)
<br>
	 *  @param       handle                 [IN]          Handle
<br>
	 *  @param       pFrame                 [IN]          Pointer of recevied image data and info
<br>
	 *  @return      Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_FreeImageBuffer(void*, MV_FRAME_OUT*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:382</i>
	 */
	int MV_CC_FreeImageBuffer(Pointer handle, MV_FRAME_OUT pFrame);
	/**
	 * @fn         MV_CC_GetOneFrameTimeout
<br>
	 *  @brief      \u91c7\u7528\u8d85\u65f6\u673a\u5236\u83b7\u53d6\u4e00\u5e27\u56fe\u7247\uff0cSDK\u5185\u90e8\u7b49\u5f85\u76f4\u5230\u6709\u6570\u636e\u65f6\u8fd4\u56de\uff0c
<br>
	 * \u6b64\u63a5\u53e3\u53ef\u4ee5\u589e\u52a0\u53d6\u6d41\u5e73\u7a33\u6027\uff0c\u9002\u5408\u7528\u4e8e\u5bf9\u5e73\u7a33\u6027\u8981\u6c42\u8f83\u9ad8\u7684\u573a\u5408
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param       pData                  [OUT]         \u56fe\u50cf\u6570\u636e\u63a5\u6536\u6307\u9488
<br>
	 *  @param       nDataSize              [IN]          \u63a5\u6536\u7f13\u5b58\u5927\u5c0f
<br>
	 *  @param       pFrameInfo             [OUT]         \u56fe\u50cf\u4fe1\u606f\u7ed3\u6784\u4f53
<br>
	 *  @param       nMsec                  [IN]          \u7b49\u5f85\u8d85\u65f6\u65f6\u95f4
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_GetOneFrameTimeout
<br>
	 *  @brief      Timeout mechanism is used to get image, and the SDK waits inside until the data is returned,
<br>
	 * this interface can increase the flow stability, and is suitable for occasions with higher stability requirements
<br>
	 *  @param       handle                 [IN]          Handle
<br>
	 *  @param       pData                  [OUT]         Recevied image data pointer
<br>
	 *  @param       nDataSize              [IN]          Recevied buffer size
<br>
	 *  @param       pFrameInfo             [OUT]         Image information structure
<br>
	 *  @param       nMsec                  [IN]          Waiting timeout
<br>
	 *  @return      Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetOneFrameTimeout(void*, unsigned char*, unsigned int, MV_FRAME_OUT_INFO_EX*, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:405</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_GetOneFrameTimeout(Pointer, ByteBuffer, int, MV_FRAME_OUT_INFO_EX, int)} and {@link #MV_CC_GetOneFrameTimeout(Pointer, Pointer, int, MV_FRAME_OUT_INFO_EX, int)} instead
	 */
	@Deprecated 
	int MV_CC_GetOneFrameTimeout(Pointer handle, Pointer pData, int nDataSize, MV_FRAME_OUT_INFO_EX pFrameInfo, int nMsec);
	/**
	 * @fn         MV_CC_GetOneFrameTimeout
<br>
	 *  @brief      \u91c7\u7528\u8d85\u65f6\u673a\u5236\u83b7\u53d6\u4e00\u5e27\u56fe\u7247\uff0cSDK\u5185\u90e8\u7b49\u5f85\u76f4\u5230\u6709\u6570\u636e\u65f6\u8fd4\u56de\uff0c
<br>
	 * \u6b64\u63a5\u53e3\u53ef\u4ee5\u589e\u52a0\u53d6\u6d41\u5e73\u7a33\u6027\uff0c\u9002\u5408\u7528\u4e8e\u5bf9\u5e73\u7a33\u6027\u8981\u6c42\u8f83\u9ad8\u7684\u573a\u5408
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param       pData                  [OUT]         \u56fe\u50cf\u6570\u636e\u63a5\u6536\u6307\u9488
<br>
	 *  @param       nDataSize              [IN]          \u63a5\u6536\u7f13\u5b58\u5927\u5c0f
<br>
	 *  @param       pFrameInfo             [OUT]         \u56fe\u50cf\u4fe1\u606f\u7ed3\u6784\u4f53
<br>
	 *  @param       nMsec                  [IN]          \u7b49\u5f85\u8d85\u65f6\u65f6\u95f4
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_GetOneFrameTimeout
<br>
	 *  @brief      Timeout mechanism is used to get image, and the SDK waits inside until the data is returned,
<br>
	 * this interface can increase the flow stability, and is suitable for occasions with higher stability requirements
<br>
	 *  @param       handle                 [IN]          Handle
<br>
	 *  @param       pData                  [OUT]         Recevied image data pointer
<br>
	 *  @param       nDataSize              [IN]          Recevied buffer size
<br>
	 *  @param       pFrameInfo             [OUT]         Image information structure
<br>
	 *  @param       nMsec                  [IN]          Waiting timeout
<br>
	 *  @return      Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetOneFrameTimeout(void*, unsigned char*, unsigned int, MV_FRAME_OUT_INFO_EX*, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:405</i>
	 */
	int MV_CC_GetOneFrameTimeout(Pointer handle, ByteBuffer pData, int nDataSize, MV_FRAME_OUT_INFO_EX pFrameInfo, int nMsec);
	/**
	 * @fn         MV_CC_Display
<br>
	 *  @brief      \u663e\u793a\u56fe\u50cf\uff0c\u6ce8\u518c\u663e\u793a\u7a97\u53e3\uff0c\u5185\u90e8\u81ea\u52a8\u663e\u793a\uff08\u4e0eMV_CC_GetImageBuffer\u4e0d\u80fd\u540c\u65f6\u4f7f\u7528\uff09
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param       hWnd                   [IN]          \u663e\u793a\u7a97\u53e3\u53e5\u67c4
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_Display
<br>
	 *  @brief      Display one frame image, register display window, automatic display internally
<br>
	 *  @param      handle                 [IN]          Handle
<br>
	 *  @param      hWnd                   [IN]          Display Window Handle
<br>
	 *  @return     Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_Display(void*, void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:420</i>
	 */
	int MV_CC_Display(Pointer handle, Pointer hWnd);
	/**
	 * @fn         MV_CC_DisplayOneFrame
<br>
	 *  @brief      \u663e\u793a\u4e00\u5e27\u56fe\u50cf
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param       pDisplayInfo           [IN]          \u56fe\u50cf\u4fe1\u606f
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_DisplayOneFrame
<br>
	 *  @brief      Display one frame image
<br>
	 *  @param      handle                 [IN]          Handle
<br>
	 *  @param      pDisplayInfo           [IN]          Frame Info
<br>
	 *  @return     Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_DisplayOneFrame(void*, MV_DISPLAY_FRAME_INFO*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:435</i>
	 */
	int MV_CC_DisplayOneFrame(Pointer handle, MV_DISPLAY_FRAME_INFO pDisplayInfo);
	/**
	 * @fn         MV_CC_SetImageNodeNum
<br>
	 *  @brief      \u8bbe\u7f6eSDK\u5185\u90e8\u56fe\u50cf\u7f13\u5b58\u8282\u70b9\u4e2a\u6570\uff0c\u8303\u56f4[1, 30]\uff0c\u5728\u6293\u56fe\u524d\u8c03\u7528
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param       nNum                   [IN]          \u7f13\u5b58\u8282\u70b9\u4e2a\u6570
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_SetImageNodeNum
<br>
	 *  @brief      Set the number of the internal image cache nodes in SDK, in the range [1, 30], to be called before the capture
<br>
	 *  @param      handle                 [IN]          Handle
<br>
	 *  @param      nNum                   [IN]          Image Node Number
<br>
	 *  @return     Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetImageNodeNum(void*, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:450</i>
	 */
	int MV_CC_SetImageNodeNum(Pointer handle, int nNum);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetImageInfo(IN void* handle, IN OUT MV_IMAGE_BASIC_INFO* pstInfo);
<br>
	 *  @brief  \u83b7\u53d6\u56fe\u50cf\u57fa\u672c\u4fe1\u606f
<br>
	 *  @param  void* handle                     [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MV_IMAGE_BASIC_INFO* pstInfo     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u56fe\u50cf\u57fa\u672c\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53c2\u8003 CameraParam.h \u4e2d\u7684 MV_IMAGE_BASIC_INFO \u5b9a\u4e49
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetImageInfo(IN void* handle, IN OUT MV_IMAGE_BASIC_INFO* pstInfo);
<br>
	 *  @brief  Get basic information of image
<br>
	 *  @param  void* handle                     [IN]        Handle
<br>
	 *  @param  MV_IMAGE_BASIC_INFO* pstInfo     [IN][OUT]   Structure pointer of image basic information
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to the definition of MV_IMAGE_BASIC_INFO in CameraParam.h
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetImageInfo(void*, MV_IMAGE_BASIC_INFO*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:469</i>
	 */
	int MV_CC_GetImageInfo(Pointer handle, MV_IMAGE_BASIC_INFO pstInfo);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetDeviceInfo(IN void* handle, IN OUT MV_CC_DEVICE_INFO* pstDevInfo);
<br>
	 *  @brief  \u83b7\u53d6\u8bbe\u5907\u4fe1\u606f
<br>
	 *  @param  void* handle                     [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MV_CC_DEVICE_INFO* pstDevInfo    [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u8bbe\u5907\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53c2\u8003 CameraParam.h \u4e2d\u7684 MV_CC_DEVICE_INFO \u5b9a\u4e49
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetDeviceInfo(IN void* handle, IN OUT MV_CC_DEVICE_INFO* pstDevInfo);
<br>
	 *  @brief  Get device information
<br>
	 *  @param  void* handle                     [IN]        Handle
<br>
	 *  @param  MV_CC_DEVICE_INFO* pstDevInfo    [IN][OUT]   Structure pointer of device information
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to the definition of MV_CC_DEVICE_INFO in CameraParam.h
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetDeviceInfo(void*, MV_CC_DEVICE_INFO*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:488</i>
	 */
	int MV_CC_GetDeviceInfo(Pointer handle, MV_CC_DEVICE_INFO pstDevInfo);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAllMatchInfo(IN void* handle, IN OUT MV_ALL_MATCH_INFO* pstInfo);
<br>
	 *  @brief  \u83b7\u53d6\u5404\u79cd\u7c7b\u578b\u7684\u4fe1\u606f
<br>
	 *  @param  void* handle                     [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MV_ALL_MATCH_INFO* pstInfo       [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u5404\u79cd\u7c7b\u578b\u7684\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53c2\u8003 CameraParam.h \u4e2d\u7684 MV_ALL_MATCH_INFO \u5b9a\u4e49
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAllMatchInfo(IN void* handle, IN OUT MV_ALL_MATCH_INFO* pstInfo);
<br>
	 *  @brief  Get various type of information
<br>
	 *  @param  void* handle                     [IN]        Handle
<br>
	 *  @param  MV_ALL_MATCH_INFO* pstInfo       [IN][OUT]   Structure pointer of various type of information
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to the definition of MV_ALL_MATCH_INFO in CameraParam.h
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetAllMatchInfo(void*, MV_ALL_MATCH_INFO*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:507</i>
	 */
	int MV_CC_GetAllMatchInfo(Pointer handle, MV_ALL_MATCH_INFO pstInfo);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetIntValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_INTVALUE *pIntValue);
<br>
	 *  @brief  \u83b7\u53d6Integer\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                [IN]        \u5c5e\u6027\u952e\u503c\uff0c\u5982\u83b7\u53d6\u5bbd\u5ea6\u4fe1\u606f\u5219\u4e3a"Width"
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u5c5e\u6027\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetIntValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_INTVALUE *pIntValue);
<br>
	 *  @brief  Get Integer value
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  char* strKey                [IN]        Key value, for example, using "Width" to get width
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of camera features
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetIntValue(void*, const char*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:533</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_GetIntValue(Pointer, String, MVCC_INTVALUE)} and {@link #MV_CC_GetIntValue(Pointer, Pointer, MVCC_INTVALUE)} instead
	 */
	@Deprecated 
	int MV_CC_GetIntValue(Pointer handle, Pointer strKey, MVCC_INTVALUE pIntValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetIntValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_INTVALUE *pIntValue);
<br>
	 *  @brief  \u83b7\u53d6Integer\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                [IN]        \u5c5e\u6027\u952e\u503c\uff0c\u5982\u83b7\u53d6\u5bbd\u5ea6\u4fe1\u606f\u5219\u4e3a"Width"
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u5c5e\u6027\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetIntValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_INTVALUE *pIntValue);
<br>
	 *  @brief  Get Integer value
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  char* strKey                [IN]        Key value, for example, using "Width" to get width
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of camera features
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetIntValue(void*, const char*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:533</i>
	 */
	int MV_CC_GetIntValue(Pointer handle, String strKey, MVCC_INTVALUE pIntValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetIntValueEx(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_INTVALUE *pIntValue);
<br>
	 *  @brief  \u83b7\u53d6Integer\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                [IN]        \u5c5e\u6027\u952e\u503c\uff0c\u5982\u83b7\u53d6\u5bbd\u5ea6\u4fe1\u606f\u5219\u4e3a"Width"
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u5c5e\u6027\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetIntValueEx(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_INTVALUE *pIntValue);
<br>
	 *  @brief  Get Integer value
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  char* strKey                [IN]        Key value, for example, using "Width" to get width
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of camera features
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetIntValueEx(void*, const char*, MVCC_INTVALUE_EX*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:558</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_GetIntValueEx(Pointer, String, MVCC_INTVALUE_EX)} and {@link #MV_CC_GetIntValueEx(Pointer, Pointer, MVCC_INTVALUE_EX)} instead
	 */
	@Deprecated 
	int MV_CC_GetIntValueEx(Pointer handle, Pointer strKey, MVCC_INTVALUE_EX pIntValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetIntValueEx(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_INTVALUE *pIntValue);
<br>
	 *  @brief  \u83b7\u53d6Integer\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                [IN]        \u5c5e\u6027\u952e\u503c\uff0c\u5982\u83b7\u53d6\u5bbd\u5ea6\u4fe1\u606f\u5219\u4e3a"Width"
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u5c5e\u6027\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetIntValueEx(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_INTVALUE *pIntValue);
<br>
	 *  @brief  Get Integer value
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  char* strKey                [IN]        Key value, for example, using "Width" to get width
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of camera features
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetIntValueEx(void*, const char*, MVCC_INTVALUE_EX*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:558</i>
	 */
	int MV_CC_GetIntValueEx(Pointer handle, String strKey, MVCC_INTVALUE_EX pIntValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetIntValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6eInteger\u578b\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                [IN]        \u5c5e\u6027\u952e\u503c\uff0c\u5982\u83b7\u53d6\u5bbd\u5ea6\u4fe1\u606f\u5219\u4e3a"Width"
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u7684\u5c5e\u6027\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetIntValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN unsigned int nValue);
<br>
	 *  @brief  Set Integer value
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  char* strKey                [IN]        Key value, for example, using "Width" to set width
<br>
	 *          const unsigned int nValue   [IN]        Feature value to set
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetIntValue(void*, const char*, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:579</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_SetIntValue(Pointer, String, int)} and {@link #MV_CC_SetIntValue(Pointer, Pointer, int)} instead
	 */
	@Deprecated 
	int MV_CC_SetIntValue(Pointer handle, Pointer strKey, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetIntValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6eInteger\u578b\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                [IN]        \u5c5e\u6027\u952e\u503c\uff0c\u5982\u83b7\u53d6\u5bbd\u5ea6\u4fe1\u606f\u5219\u4e3a"Width"
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u7684\u5c5e\u6027\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetIntValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN unsigned int nValue);
<br>
	 *  @brief  Set Integer value
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  char* strKey                [IN]        Key value, for example, using "Width" to set width
<br>
	 *          const unsigned int nValue   [IN]        Feature value to set
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetIntValue(void*, const char*, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:579</i>
	 */
	int MV_CC_SetIntValue(Pointer handle, String strKey, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetIntValueEx(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN int64_t nValue);
<br>
	 *  @brief  \u8bbe\u7f6eInteger\u578b\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                [IN]        \u5c5e\u6027\u952e\u503c\uff0c\u5982\u83b7\u53d6\u5bbd\u5ea6\u4fe1\u606f\u5219\u4e3a"Width"
<br>
	 *          const int64_t nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u7684\u5c5e\u6027\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetIntValueEx(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN int64_t nValue);
<br>
	 *  @brief  Set Integer value
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  char* strKey                [IN]        Key value, for example, using "Width" to set width
<br>
	 *          const int64_t nValue   [IN]        Feature value to set
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetIntValueEx(void*, const char*, int64_t)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:600</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_SetIntValueEx(Pointer, String, long)} and {@link #MV_CC_SetIntValueEx(Pointer, Pointer, long)} instead
	 */
	@Deprecated 
	int MV_CC_SetIntValueEx(Pointer handle, Pointer strKey, long nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetIntValueEx(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN int64_t nValue);
<br>
	 *  @brief  \u8bbe\u7f6eInteger\u578b\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                [IN]        \u5c5e\u6027\u952e\u503c\uff0c\u5982\u83b7\u53d6\u5bbd\u5ea6\u4fe1\u606f\u5219\u4e3a"Width"
<br>
	 *          const int64_t nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u7684\u5c5e\u6027\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetIntValueEx(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN int64_t nValue);
<br>
	 *  @brief  Set Integer value
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  char* strKey                [IN]        Key value, for example, using "Width" to set width
<br>
	 *          const int64_t nValue   [IN]        Feature value to set
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetIntValueEx(void*, const char*, int64_t)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:600</i>
	 */
	int MV_CC_SetIntValueEx(Pointer handle, String strKey, long nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetEnumValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_ENUMVALUE *pEnumValue);
<br>
	 *  @brief  \u83b7\u53d6Enum\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                   [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                   [IN]        \u5c5e\u6027\u952e\u503c\uff0c\u5982\u83b7\u53d6\u50cf\u7d20\u683c\u5f0f\u4fe1\u606f\u5219\u4e3a"PixelFormat"
<br>
	 *  @param  MVCC_ENUMVALUE* pEnumValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u5c5e\u6027\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetEnumValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_ENUMVALUE *pEnumValue);
<br>
	 *  @brief  Get Enum value
<br>
	 *  @param  void* handle                   [IN]        Handle
<br>
	 *  @param  char* strKey                   [IN]        Key value, for example, using "PixelFormat" to get pixel format
<br>
	 *  @param  MVCC_ENUMVALUE* pEnumValue     [IN][OUT]   Structure pointer of camera features
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetEnumValue(void*, const char*, MVCC_ENUMVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:621</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_GetEnumValue(Pointer, String, MVCC_ENUMVALUE)} and {@link #MV_CC_GetEnumValue(Pointer, Pointer, MVCC_ENUMVALUE)} instead
	 */
	@Deprecated 
	int MV_CC_GetEnumValue(Pointer handle, Pointer strKey, MVCC_ENUMVALUE pEnumValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetEnumValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_ENUMVALUE *pEnumValue);
<br>
	 *  @brief  \u83b7\u53d6Enum\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                   [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                   [IN]        \u5c5e\u6027\u952e\u503c\uff0c\u5982\u83b7\u53d6\u50cf\u7d20\u683c\u5f0f\u4fe1\u606f\u5219\u4e3a"PixelFormat"
<br>
	 *  @param  MVCC_ENUMVALUE* pEnumValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u5c5e\u6027\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetEnumValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_ENUMVALUE *pEnumValue);
<br>
	 *  @brief  Get Enum value
<br>
	 *  @param  void* handle                   [IN]        Handle
<br>
	 *  @param  char* strKey                   [IN]        Key value, for example, using "PixelFormat" to get pixel format
<br>
	 *  @param  MVCC_ENUMVALUE* pEnumValue     [IN][OUT]   Structure pointer of camera features
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetEnumValue(void*, const char*, MVCC_ENUMVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:621</i>
	 */
	int MV_CC_GetEnumValue(Pointer handle, String strKey, MVCC_ENUMVALUE pEnumValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetEnumValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6eEnum\u578b\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                [IN]        \u5c5e\u6027\u952e\u503c\uff0c\u5982\u83b7\u53d6\u50cf\u7d20\u683c\u5f0f\u4fe1\u606f\u5219\u4e3a"PixelFormat"
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u7684\u5c5e\u6027\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetEnumValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN unsigned int nValue);
<br>
	 *  @brief  Set Enum value
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  char* strKey                [IN]        Key value, for example, using "PixelFormat" to set pixel format
<br>
	 *          const unsigned int nValue   [IN]        Feature value to set
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetEnumValue(void*, const char*, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:642</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_SetEnumValue(Pointer, String, int)} and {@link #MV_CC_SetEnumValue(Pointer, Pointer, int)} instead
	 */
	@Deprecated 
	int MV_CC_SetEnumValue(Pointer handle, Pointer strKey, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetEnumValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6eEnum\u578b\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                [IN]        \u5c5e\u6027\u952e\u503c\uff0c\u5982\u83b7\u53d6\u50cf\u7d20\u683c\u5f0f\u4fe1\u606f\u5219\u4e3a"PixelFormat"
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u7684\u5c5e\u6027\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetEnumValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN unsigned int nValue);
<br>
	 *  @brief  Set Enum value
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  char* strKey                [IN]        Key value, for example, using "PixelFormat" to set pixel format
<br>
	 *          const unsigned int nValue   [IN]        Feature value to set
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetEnumValue(void*, const char*, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:642</i>
	 */
	int MV_CC_SetEnumValue(Pointer handle, String strKey, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetEnumValueByString(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN const char* sValue);
<br>
	 *  @brief  \u8bbe\u7f6eEnum\u578b\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                [IN]        \u5c5e\u6027\u952e\u503c\uff0c\u5982\u83b7\u53d6\u50cf\u7d20\u683c\u5f0f\u4fe1\u606f\u5219\u4e3a"PixelFormat"
<br>
	 *          char* sValue                [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u7684\u5c5e\u6027\u5b57\u7b26\u4e32
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetEnumValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN const char* sValue);
<br>
	 *  @brief  Set Enum value
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  char* strKey                [IN]        Key value, for example, using "PixelFormat" to set pixel format
<br>
	 *          char* sValue                [IN]        Feature String to set
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetEnumValueByString(void*, const char*, const char*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:663</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_SetEnumValueByString(Pointer, String, String)} and {@link #MV_CC_SetEnumValueByString(Pointer, Pointer, Pointer)} instead
	 */
	@Deprecated 
	int MV_CC_SetEnumValueByString(Pointer handle, Pointer strKey, Pointer sValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetEnumValueByString(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN const char* sValue);
<br>
	 *  @brief  \u8bbe\u7f6eEnum\u578b\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                [IN]        \u5c5e\u6027\u952e\u503c\uff0c\u5982\u83b7\u53d6\u50cf\u7d20\u683c\u5f0f\u4fe1\u606f\u5219\u4e3a"PixelFormat"
<br>
	 *          char* sValue                [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u7684\u5c5e\u6027\u5b57\u7b26\u4e32
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetEnumValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN const char* sValue);
<br>
	 *  @brief  Set Enum value
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  char* strKey                [IN]        Key value, for example, using "PixelFormat" to set pixel format
<br>
	 *          char* sValue                [IN]        Feature String to set
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetEnumValueByString(void*, const char*, const char*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:663</i>
	 */
	int MV_CC_SetEnumValueByString(Pointer handle, String strKey, String sValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetFloatValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_FLOATVALUE *pFloatValue);
<br>
	 *  @brief  \u83b7\u53d6Float\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                     [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                     [IN]        \u5c5e\u6027\u952e\u503c
<br>
	 *  @param  MVCC_FLOATVALUE *pFloatValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u5c5e\u6027\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetFloatValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_FLOATVALUE *pFloatValue);
<br>
	 *  @brief  Get Float value
<br>
	 *  @param  void* handle                     [IN]        Handle
<br>
	 *  @param  char* strKey                     [IN]        Key value
<br>
	 *  @param  MVCC_FLOATVALUE *pFloatValue     [IN][OUT]   Structure pointer of camera features
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetFloatValue(void*, const char*, MVCC_FLOATVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:684</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_GetFloatValue(Pointer, String, MVCC_FLOATVALUE)} and {@link #MV_CC_GetFloatValue(Pointer, Pointer, MVCC_FLOATVALUE)} instead
	 */
	@Deprecated 
	int MV_CC_GetFloatValue(Pointer handle, Pointer strKey, MVCC_FLOATVALUE pFloatValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetFloatValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_FLOATVALUE *pFloatValue);
<br>
	 *  @brief  \u83b7\u53d6Float\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                     [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                     [IN]        \u5c5e\u6027\u952e\u503c
<br>
	 *  @param  MVCC_FLOATVALUE *pFloatValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u5c5e\u6027\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetFloatValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_FLOATVALUE *pFloatValue);
<br>
	 *  @brief  Get Float value
<br>
	 *  @param  void* handle                     [IN]        Handle
<br>
	 *  @param  char* strKey                     [IN]        Key value
<br>
	 *  @param  MVCC_FLOATVALUE *pFloatValue     [IN][OUT]   Structure pointer of camera features
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetFloatValue(void*, const char*, MVCC_FLOATVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:684</i>
	 */
	int MV_CC_GetFloatValue(Pointer handle, String strKey, MVCC_FLOATVALUE pFloatValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetFloatValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN float fValue);
<br>
	 *  @brief  \u8bbe\u7f6efloat\u578b\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                [IN]        \u5c5e\u6027\u952e\u503c
<br>
	 *          float fValue                [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u7684\u5c5e\u6027\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetFloatValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN float fValue);
<br>
	 *  @brief  Set float value
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  char* strKey                [IN]        Key value
<br>
	 *          float fValue                [IN]        Feature value to set
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetFloatValue(void*, const char*, float)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:705</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_SetFloatValue(Pointer, String, float)} and {@link #MV_CC_SetFloatValue(Pointer, Pointer, float)} instead
	 */
	@Deprecated 
	int MV_CC_SetFloatValue(Pointer handle, Pointer strKey, float fValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetFloatValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN float fValue);
<br>
	 *  @brief  \u8bbe\u7f6efloat\u578b\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                [IN]        \u5c5e\u6027\u952e\u503c
<br>
	 *          float fValue                [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u7684\u5c5e\u6027\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetFloatValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN float fValue);
<br>
	 *  @brief  Set float value
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  char* strKey                [IN]        Key value
<br>
	 *          float fValue                [IN]        Feature value to set
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetFloatValue(void*, const char*, float)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:705</i>
	 */
	int MV_CC_SetFloatValue(Pointer handle, String strKey, float fValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBoolValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT bool *pBoolValue);
<br>
	 *  @brief  \u83b7\u53d6Boolean\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                     [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                     [IN]        \u5c5e\u6027\u952e\u503c
<br>
	 *  @param  bool *pBoolValue                 [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u5c5e\u6027\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBoolValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT bool *pBoolValue);
<br>
	 *  @brief  Get Boolean value
<br>
	 *  @param  void* handle                     [IN]        Handle
<br>
	 *  @param  char* strKey                     [IN]        Key value
<br>
	 *  @param  bool *pBoolValue                 [IN][OUT]   Structure pointer of camera features
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetBoolValue(void*, const char*, bool*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:726</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_GetBoolValue(Pointer, String, ByteBuffer)} and {@link #MV_CC_GetBoolValue(Pointer, Pointer, Pointer)} instead
	 */
	@Deprecated 
	int MV_CC_GetBoolValue(Pointer handle, Pointer strKey, Pointer pBoolValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBoolValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT bool *pBoolValue);
<br>
	 *  @brief  \u83b7\u53d6Boolean\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                     [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                     [IN]        \u5c5e\u6027\u952e\u503c
<br>
	 *  @param  bool *pBoolValue                 [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u5c5e\u6027\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBoolValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT bool *pBoolValue);
<br>
	 *  @brief  Get Boolean value
<br>
	 *  @param  void* handle                     [IN]        Handle
<br>
	 *  @param  char* strKey                     [IN]        Key value
<br>
	 *  @param  bool *pBoolValue                 [IN][OUT]   Structure pointer of camera features
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetBoolValue(void*, const char*, bool*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:726</i>
	 */
	int MV_CC_GetBoolValue(Pointer handle, String strKey, ByteBuffer pBoolValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBoolValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN bool bValue);
<br>
	 *  @brief  \u8bbe\u7f6eBoolean\u578b\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                [IN]        \u5c5e\u6027\u952e\u503c
<br>
	 *          bool bValue                 [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u7684\u5c5e\u6027\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBoolValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN bool bValue);
<br>
	 *  @brief  Set Boolean value
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  char* strKey                [IN]        Key value
<br>
	 *          bool bValue                 [IN]        Feature value to set
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetBoolValue(void*, const char*, bool)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:747</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_SetBoolValue(Pointer, String, byte)} and {@link #MV_CC_SetBoolValue(Pointer, Pointer, byte)} instead
	 */
	@Deprecated 
	int MV_CC_SetBoolValue(Pointer handle, Pointer strKey, byte bValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBoolValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN bool bValue);
<br>
	 *  @brief  \u8bbe\u7f6eBoolean\u578b\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                [IN]        \u5c5e\u6027\u952e\u503c
<br>
	 *          bool bValue                 [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u7684\u5c5e\u6027\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBoolValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN bool bValue);
<br>
	 *  @brief  Set Boolean value
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  char* strKey                [IN]        Key value
<br>
	 *          bool bValue                 [IN]        Feature value to set
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetBoolValue(void*, const char*, bool)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:747</i>
	 */
	int MV_CC_SetBoolValue(Pointer handle, String strKey, byte bValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetStringValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_STRINGVALUE *pStringValue);
<br>
	 *  @brief  \u83b7\u53d6String\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                       [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                       [IN]        \u5c5e\u6027\u952e\u503c
<br>
	 *  @param  MVCC_STRINGVALUE *pStringValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u5c5e\u6027\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetStringValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_STRINGVALUE *pStringValue);
<br>
	 *  @brief  Get String value
<br>
	 *  @param  void* handle                       [IN]        Handle
<br>
	 *  @param  char* strKey                       [IN]        Key value
<br>
	 *  @param  MVCC_STRINGVALUE *pStringValue     [IN][OUT]   Structure pointer of camera features
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetStringValue(void*, const char*, MVCC_STRINGVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:768</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_GetStringValue(Pointer, String, MVCC_STRINGVALUE)} and {@link #MV_CC_GetStringValue(Pointer, Pointer, MVCC_STRINGVALUE)} instead
	 */
	@Deprecated 
	int MV_CC_GetStringValue(Pointer handle, Pointer strKey, MVCC_STRINGVALUE pStringValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetStringValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_STRINGVALUE *pStringValue);
<br>
	 *  @brief  \u83b7\u53d6String\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                       [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                       [IN]        \u5c5e\u6027\u952e\u503c
<br>
	 *  @param  MVCC_STRINGVALUE *pStringValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u5c5e\u6027\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetStringValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * OUT MVCC_STRINGVALUE *pStringValue);
<br>
	 *  @brief  Get String value
<br>
	 *  @param  void* handle                       [IN]        Handle
<br>
	 *  @param  char* strKey                       [IN]        Key value
<br>
	 *  @param  MVCC_STRINGVALUE *pStringValue     [IN][OUT]   Structure pointer of camera features
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetStringValue(void*, const char*, MVCC_STRINGVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:768</i>
	 */
	int MV_CC_GetStringValue(Pointer handle, String strKey, MVCC_STRINGVALUE pStringValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetStringValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN const char * sValue);
<br>
	 *  @brief  \u8bbe\u7f6eString\u578b\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                  [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                  [IN]        \u5c5e\u6027\u952e\u503c
<br>
	 *          char * sValue                 [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u7684\u5c5e\u6027\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetStringValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN const char * sValue);
<br>
	 *  @brief  Set String value
<br>
	 *  @param  void* handle                  [IN]        Handle
<br>
	 *  @param  char* strKey                  [IN]        Key value
<br>
	 *          char * sValue                 [IN]        Feature value to set
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetStringValue(void*, const char*, const char*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:789</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_SetStringValue(Pointer, String, String)} and {@link #MV_CC_SetStringValue(Pointer, Pointer, Pointer)} instead
	 */
	@Deprecated 
	int MV_CC_SetStringValue(Pointer handle, Pointer strKey, Pointer sValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetStringValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN const char * sValue);
<br>
	 *  @brief  \u8bbe\u7f6eString\u578b\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                  [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                  [IN]        \u5c5e\u6027\u952e\u503c
<br>
	 *          char * sValue                 [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u7684\u5c5e\u6027\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetStringValue(IN void* handle,
<br>
	 * IN const char* strKey,
<br>
	 * IN const char * sValue);
<br>
	 *  @brief  Set String value
<br>
	 *  @param  void* handle                  [IN]        Handle
<br>
	 *  @param  char* strKey                  [IN]        Key value
<br>
	 *          char * sValue                 [IN]        Feature value to set
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetStringValue(void*, const char*, const char*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:789</i>
	 */
	int MV_CC_SetStringValue(Pointer handle, String strKey, String sValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetCommandValue(IN void* handle,
<br>
	 * IN const char* strKey);
<br>
	 *  @brief  \u8bbe\u7f6eCommand\u578b\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                  [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                  [IN]        \u5c5e\u6027\u952e\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetCommandValue(IN void* handle,
<br>
	 * IN const char* strKey);
<br>
	 *  @brief  Set Command value
<br>
	 *  @param  void* handle                  [IN]        Handle
<br>
	 *  @param  char* strKey                  [IN]        Key value
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetCommandValue(void*, const char*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:806</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_SetCommandValue(Pointer, String)} and {@link #MV_CC_SetCommandValue(Pointer, Pointer)} instead
	 */
	@Deprecated 
	int MV_CC_SetCommandValue(Pointer handle, Pointer strKey);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetCommandValue(IN void* handle,
<br>
	 * IN const char* strKey);
<br>
	 *  @brief  \u8bbe\u7f6eCommand\u578b\u5c5e\u6027\u503c
<br>
	 *  @param  void* handle                  [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  char* strKey                  [IN]        \u5c5e\u6027\u952e\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetCommandValue(IN void* handle,
<br>
	 * IN const char* strKey);
<br>
	 *  @brief  Set Command value
<br>
	 *  @param  void* handle                  [IN]        Handle
<br>
	 *  @param  char* strKey                  [IN]        Key value
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetCommandValue(void*, const char*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:806</i>
	 */
	int MV_CC_SetCommandValue(Pointer handle, String strKey);
	/**
	 * @fn     MV_CC_InvalidateNodes
<br>
	 *  @brief  \u6e05\u9664GenICam\u8282\u70b9\u7f13\u5b58
<br>
	 *  @param  handle                  [IN]           \u53e5\u67c4\u5730\u5740
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CC_InvalidateNodes
<br>
	 *  @brief  Invalidate GenICam Nodes
<br>
	 *  @param  handle                  [IN]           Handle
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_InvalidateNodes(void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:819</i>
	 */
	int MV_CC_InvalidateNodes(Pointer handle);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetWidth(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u56fe\u50cf\u5bbd\u5ea6
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u5bbd\u5ea6\u7684\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *          \u8fd4\u56de\u7684pstValue\u7ed3\u6784\u4f53\u7684\u610f\u4e49
<br>
	 *                  unsigned int    nCurValue;      // \u4ee3\u8868\u76f8\u673a\u5f53\u524d\u7684\u5bbd\u5ea6\u503c
<br>
	 *                  unsigned int    nMax;           // \u8868\u793a\u76f8\u673a\u5141\u8bb8\u7684\u6700\u5927\u53ef\u8bbe\u7f6e\u7684\u5bbd\u5ea6\u503c
<br>
	 *                  unsigned int    nMin;           // \u8868\u793a\u76f8\u673a\u5141\u8bb8\u7684\u6700\u5c0f\u53ef\u8bbe\u7f6e\u7684\u5bbd\u5ea6\u503c
<br>
	 *                  unsigned int    nInc;           // \u8868\u793a\u76f8\u673a\u8bbe\u7f6e\u7684\u5bbd\u5ea6\u589e\u91cf\u5fc5\u987b\u662fnInc\u7684\u500d\u6570\uff0c\u5426\u5219\u65e0\u6548
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u83b7\u5f97\u76f8\u5e94\u53c2\u6570\u4fe1\u606f\u7684\u7ed3\u6784\u4f53, \u5931\u8d25, \u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u5176\u4ed6\u6574\u578b\u7ed3\u6784\u4f53\u53c2\u6570\u7684\u63a5\u53e3\u53ef\u53c2\u7167\u6b64\u63a5\u53e3
<br>
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetWidth(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  Get image width
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *          MVCC_INTVALUE* pstValue     [IN][OUT]   Returns the information structure pointer about the camera's width for the caller
<br>
	 *          The meaning of returns pstValue structure
<br>
	 *                  unsigned int    nCurValue;      // Represents the current width value of the camera
<br>
	 *                  unsigned int    nMax;           // Indicates the maximum settable width value allowed by the camera
<br>
	 *                  unsigned int    nMin;           // Indicates the minimum settable width value allowed by the camera
<br>
	 *                  unsigned int    nInc;           // Indicates that the width increment set by the camera must be a multiple of nInc, otherwise it is invalid
<br>
	 *  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code
<br>
	 *  
<br>
	 *          Other Integer structure parameters interface can refer to this interface
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetWidth(void*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:853</i>
	 */
	int MV_CC_GetWidth(Pointer handle, MVCC_INTVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetWidth(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u56fe\u50cf\u5bbd\u5ea6
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u5bbd\u5ea6\u7684\u503c,\u6ce8\u610f\u6b64\u5bbd\u5ea6\u503c\u5fc5\u987b\u662fMV_CC_GetWidth\u63a5\u53e3\u8fd4\u56de\u7684pstValue\u4e2d\u7684nInc\u7684\u500d\u6570\u624d\u80fd\u8bbe\u7f6e\u6210\u529f
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u5bbd\u5ea6\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetWidth(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set image width
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *          const unsigned int nValue   [IN]        To set the value of the camera width, note that the width value must be a multiple of nInc in the pstValue returned by the MV_CC_GetWidth interface
<br>
	 *  @return Success, return MV_OK, and the camera width will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetWidth(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:868</i>
	 */
	int MV_CC_SetWidth(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetHeight(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u56fe\u50cf\u9ad8\u5ea6
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u9ad8\u5ea6\u7684\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u5c06\u9ad8\u5ea6\u4fe1\u606f\u8fd4\u56de\u5230\u7ed3\u6784\u4f53\u4e2d\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetWidth
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetHeight(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  Get image height
<br>
	 *  @param  void* handle                [IN]        Camera handle
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Return pointer of information structure related to camera height to user
<br>
	 *  @return Success, return MV_OK, and return height information to the structure. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetWidth
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetHeight(void*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:887</i>
	 */
	int MV_CC_GetHeight(Pointer handle, MVCC_INTVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetHeight(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u56fe\u50cf\u9ad8\u5ea6
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u5bbd\u5ea6\u7684\u503c,\u6ce8\u610f\u6b64\u5bbd\u5ea6\u503c\u5fc5\u987b\u662fMV_CC_GetWidth\u63a5\u53e3\u8fd4\u56de\u7684pstValue\u4e2d\u7684nInc\u7684\u500d\u6570\u624d\u80fd\u8bbe\u7f6e\u6210\u529f
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u9ad8\u5ea6\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetHeight(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set image height
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *          const unsigned int nValue   [IN]        Camera height value to set, note that this value must be times of nInc of pstValue returned by MV_CC_GetWidth
<br>
	 *  @return Success, return MV_OK, and the camera height will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetHeight(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:902</i>
	 */
	int MV_CC_SetHeight(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAOIoffsetX(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u56fe\u50cfX\u504f\u79fb
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673aX\u504f\u79fb\u7684\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetWidth
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAOIoffsetX(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  Get image X offset
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Return pointer of information structure related to camera X offset to user
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetWidth
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetAOIoffsetX(void*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:921</i>
	 */
	int MV_CC_GetAOIoffsetX(Pointer handle, MVCC_INTVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAOIoffsetX(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u56fe\u50cfAOI\u504f\u79fb
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673aAOI\u7684\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673aAOI\u504f\u79fb\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAOIoffsetX(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set image X offset
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *          const unsigned int nValue   [IN]        Camera X offset value to set
<br>
	 *  @return Success, return MV_OK, and the camera X offset will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetAOIoffsetX(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:936</i>
	 */
	int MV_CC_SetAOIoffsetX(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAOIoffsetY(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u56fe\u50cfY\u504f\u79fb
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673aY\u504f\u79fb\u7684\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetWidth
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAOIoffsetY(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  Get image Y offset
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Return pointer of information structure related to camera Y offset to user
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetWidth
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetAOIoffsetY(void*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:955</i>
	 */
	int MV_CC_GetAOIoffsetY(Pointer handle, MVCC_INTVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAOIoffsetX(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u56fe\u50cfAOI\u504f\u79fb
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673aAOI\u7684\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673aAOI\u504f\u79fb\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAOIoffsetY(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set image Y offset
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *          const unsigned int nValue   [IN]        Camera Y offset value to set
<br>
	 *  @return Success, return MV_OK, and the camera Y offset will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetAOIoffsetY(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:970</i>
	 */
	int MV_CC_SetAOIoffsetY(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAutoExposureTimeLower(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u66dd\u5149\u4e0b\u9650
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u66dd\u5149\u503c\u4e0b\u9650\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetWidth
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAutoExposureTimeLower(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  Get exposure lower limit
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Return pointer of information structure related to camera exposure lower to user
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetWidth
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetAutoExposureTimeLower(void*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:989</i>
	 */
	int MV_CC_GetAutoExposureTimeLower(Pointer handle, MVCC_INTVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAutoExposureTimeLower(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u66dd\u5149\u503c\u4e0b\u9650
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u66dd\u5149\u503c\u4e0b\u9650
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u66dd\u5149\u4e0b\u9650\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAutoExposureTimeLower(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set exposure lower limit
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *          const unsigned int nValue   [IN]        Exposure lower to set
<br>
	 *  @return Success, return MV_OK, and the camera exposure time lower limit value will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetAutoExposureTimeLower(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1004</i>
	 */
	int MV_CC_SetAutoExposureTimeLower(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAutoExposureTimeUpper(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u66dd\u5149\u4e0a\u9650
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u66dd\u5149\u503c\u4e0a\u9650\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetWidth
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAutoExposureTimeUpper(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  Get exposure upper limit
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Return pointer of information structure related to camera exposure upper to user
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetWidth
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetAutoExposureTimeUpper(void*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1023</i>
	 */
	int MV_CC_GetAutoExposureTimeUpper(Pointer handle, MVCC_INTVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAutoExposureTimeUpper(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u66dd\u5149\u503c\u4e0a\u9650
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u66dd\u5149\u503c\u4e0a\u9650
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u66dd\u5149\u4e0a\u9650\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAutoExposureTimeUpper(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set exposure upper limit
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *          const unsigned int nValue   [IN]        Exposure upper to set
<br>
	 *  @return Success, return MV_OK, and the camera exposure time upper limit value will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetAutoExposureTimeUpper(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1038</i>
	 */
	int MV_CC_SetAutoExposureTimeUpper(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBrightness(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u4eae\u5ea6\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u4eae\u5ea6\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetWidth
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBrightness(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  Get brightness
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Return pointer of information structure related to camera brightness to user
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetWidth
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetBrightness(void*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1057</i>
	 */
	int MV_CC_GetBrightness(Pointer handle, MVCC_INTVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBrightness(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u4eae\u5ea6\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u4eae\u5ea6\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u4eae\u5ea6\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBrightness(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set brightness
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *          const unsigned int nValue   [IN]        Brightness upper to set
<br>
	 *  @return Success, return MV_OK, and the camera brightness value will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetBrightness(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1072</i>
	 */
	int MV_CC_SetBrightness(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetFrameRate(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u5e27\u7387
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          MVCC_FLOATVALUE* pstValue   [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u5e27\u7387\u7684\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *          \u8fd4\u56de\u7684pstValue\u7ed3\u6784\u4f53\u7684\u610f\u4e49
<br>
	 *                                      float           fCurValue;      // \u8868\u793a\u76f8\u673a\u5f53\u524d\u7684\u5e27\u7387
<br>
	 *                                      float           fMax;           // \u8868\u793a\u76f8\u673a\u5141\u8bb8\u8bbe\u7f6e\u7684\u6700\u5927\u5e27\u7387
<br>
	 *                                      float           fMin;           // \u8868\u793a\u76f8\u673a\u5141\u8bb8\u8bbe\u7f6e\u7684\u6700\u5c0f\u5e27\u7387
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u83b7\u5f97\u76f8\u5e94\u53c2\u6570\u4fe1\u606f\u7684\u7ed3\u6784\u4f53, \u5931\u8d25, \u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u5176\u4ed6\u6d6e\u70b9\u578b\u7ed3\u6784\u4f53\u53c2\u6570\u7684\u63a5\u53e3\u53ef\u53c2\u7167\u6b64\u63a5\u53e3
<br>
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetFrameRate(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);
<br>
	 *  @brief  Get Frame Rate
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *          MVCC_FLOATVALUE* pstValue   [IN][OUT]   Return pointer of information structure related to camera frame rate to user
<br>
	 *          The meaning of returns pstValue structure
<br>
	 *                                      float           fCurValue;      // Indicates the current frame rate of the camera
<br>
	 *                                      float           fMax;           // Indicates the maximum frame rate allowed by the camera
<br>
	 *                                      float           fMin;           // Indicates the minimum frame rate allowed by the camera
<br>
	 *  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code
<br>
	 *  
<br>
	 *          Other interface of Float structure parameters can refer to this interface
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetFrameRate(void*, MVCC_FLOATVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1099</i>
	 */
	int MV_CC_GetFrameRate(Pointer handle, MVCC_FLOATVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetFrameRate(IN void* handle, IN const float fValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u5e27\u7387
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const float fValue          [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u5e27\u7387
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u5e27\u7387\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetFrameRate(IN void* handle, IN const float fValue);
<br>
	 *  @brief  Set frame rate
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *          const float fValue          [IN]        Camera frame rate to set 
<br>
	 *  @return Success, return MV_OK, and camera frame rate will be changed to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetFrameRate(void*, const float)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1114</i>
	 */
	int MV_CC_SetFrameRate(Pointer handle, float fValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetGain(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u589e\u76ca
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          MVCC_FLOATVALUE* pstValue   [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u589e\u76ca\u7684\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *          \u8fd4\u56de\u7684pstValue\u7ed3\u6784\u4f53\u7684\u610f\u4e49
<br>
	 *                                      float           fCurValue;      // \u8868\u793a\u76f8\u673a\u5f53\u524d\u7684\u5e27\u7387
<br>
	 *                                      float           fMax;           // \u8868\u793a\u76f8\u673a\u5141\u8bb8\u8bbe\u7f6e\u7684\u6700\u5927\u5e27\u7387
<br>
	 *                                      float           fMin;           // \u8868\u793a\u76f8\u673a\u5141\u8bb8\u8bbe\u7f6e\u7684\u6700\u5c0f\u5e27\u7387
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u83b7\u5f97\u76f8\u5e94\u53c2\u6570\u4fe1\u606f\u7684\u7ed3\u6784\u4f53, \u5931\u8d25, \u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u5176\u4ed6\u6d6e\u70b9\u578b\u7ed3\u6784\u4f53\u53c2\u6570\u7684\u63a5\u53e3\u53ef\u53c2\u7167\u6b64\u63a5\u53e3
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetGain(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);
<br>
	 *  @brief  Get Gain
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *          MVCC_FLOATVALUE* pstValue   [IN][OUT]   Return pointer of information structure related to gain to user
<br>
	 *  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code
<br>
	 *                                      float           fCurValue;      // Camera current gain
<br>
	 *                                      float           fMax;           // The maximum gain camera allowed
<br>
	 *                                      float           fMin;           // The minimum gain camera allowed
<br>
	 *  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code
<br>
	 *  
<br>
	 *          Other interface of Float structure parameters can refer to this interface
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetGain(void*, MVCC_FLOATVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1141</i>
	 */
	int MV_CC_GetGain(Pointer handle, MVCC_FLOATVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetGain(IN void* handle, IN const float fValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u5e27\u7387
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const float fValue          [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u5e27\u7387
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u5e27\u7387\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetGain(IN void* handle, IN const float fValue);
<br>
	 *  @brief  Set Gain
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *          const float fValue          [IN]        Gain value to set
<br>
	 *  @return Success, return MV_OK, and the camera gain value will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetGain(void*, const float)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1156</i>
	 */
	int MV_CC_SetGain(Pointer handle, float fValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetExposureTime(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u66dd\u5149\u65f6\u95f4
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          MVCC_FLOATVALUE* pstValue   [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u66dd\u5149\u65f6\u95f4\u7684\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *          \u8fd4\u56de\u7684pstValue\u7ed3\u6784\u4f53\u7684\u610f\u4e49
<br>
	 *                                      float           fCurValue;      // \u8868\u793a\u76f8\u673a\u5f53\u524d\u7684\u5e27\u7387
<br>
	 *                                      float           fMax;           // \u8868\u793a\u76f8\u673a\u5141\u8bb8\u8bbe\u7f6e\u7684\u6700\u5927\u5e27\u7387
<br>
	 *                                      float           fMin;           // \u8868\u793a\u76f8\u673a\u5141\u8bb8\u8bbe\u7f6e\u7684\u6700\u5c0f\u5e27\u7387
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u83b7\u5f97\u76f8\u5e94\u53c2\u6570\u4fe1\u606f\u7684\u7ed3\u6784\u4f53, \u5931\u8d25, \u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u5176\u4ed6\u6d6e\u70b9\u578b\u7ed3\u6784\u4f53\u53c2\u6570\u7684\u63a5\u53e3\u53ef\u53c2\u7167\u6b64\u63a5\u53e3
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetExposureTime(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);
<br>
	 *  @brief  Get exposure time
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *          MVCC_FLOATVALUE* pstValue   [IN][OUT]   Return pointer of information structure related to exposure time to user
<br>
	 *  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code
<br>
	 *                                      float           fCurValue;      // Camera current exposure time
<br>
	 *                                      float           fMax;           // The maximum exposure time camera allowed
<br>
	 *                                      float           fMin;           // The minimum exposure time camera allowed
<br>
	 *  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code
<br>
	 *  
<br>
	 *          Other interface of Float structure parameters can refer to this interface
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetExposureTime(void*, MVCC_FLOATVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1183</i>
	 */
	int MV_CC_GetExposureTime(Pointer handle, MVCC_FLOATVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetExposureTime(IN void* handle, IN const float fValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u66dd\u5149\u65f6\u95f4
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const float fValue          [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u5e27\u7387
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u5e27\u7387\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetExposureTime(IN void* handle, IN const float fValue);
<br>
	 *  @brief  Set exposure time
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *          const float fValue          [IN]        Exposure time to set
<br>
	 *  @return Success, return MV_OK, and the camera exposure time value will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetExposureTime(void*, const float)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1198</i>
	 */
	int MV_CC_SetExposureTime(Pointer handle, float fValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetPixelFormat(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u50cf\u7d20\u683c\u5f0f
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          MVCC_ENUMVALUE* pstValue    [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u7684\u6709\u5173\u50cf\u7d20\u683c\u5f0f\u7684\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *          \u8fd4\u56de\u7684pstValue\u7ed3\u6784\u4f53\u7684\u610f\u4e49
<br>
	 *          unsigned int    nCurValue;                              //  \u76f8\u673a\u5f53\u524d\u7684\u50cf\u7d20\u683c\u5f0f\uff0c\u662f\u679a\u4e3e\u7c7b\u578b,\u6bd4\u5982\u8bf4PixelType_Gvsp_Mono8, \u8fd9\u91cc\u83b7\u5f97\u7684\u662f\u5176\u6574\u578b\u503c,\u5177\u4f53\u6570\u503c\u53c2\u7167PixelType.h\u7684MvGvspPixelType\u679a\u4e3e\u7c7b\u578b
<br>
	 *          unsigned int    nSupportedNum;                          //  \u76f8\u673a\u652f\u6301\u7684\u50cf\u7d20\u683c\u5f0f\u7684\u4e2a\u6570
<br>
	 *          unsigned int    nSupportValue[MV_MAX_XML_SYMBOLIC_NUM]; //  \u76f8\u673a\u6240\u6709\u652f\u6301\u7684\u50cf\u7d20\u683c\u5f0f\u5bf9\u5e94\u7684\u6574\u578b\u503c\u5217\u8868\uff0c\u540e\u9762\u8981\u8bbe\u7f6e\u50cf\u7d20\u683c\u5f0f\u65f6\uff0c\u53c2\u6570\u5fc5\u987b\u662f\u8fd9\u4e2a\u6570\u7ec4\u4e2d\u7684\u4e00\u79cd\uff0c\u5426\u5219\u65e0\u6548
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u83b7\u5f97\u76f8\u5e94\u53c2\u6570\u4fe1\u606f\u7684\u7ed3\u6784\u4f53, \u5931\u8d25, \u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 * \u5176\u4ed6\u679a\u4e3e\u7c7b\u578b\u53c2\u6570\u63a5\u53e3\u53ef\u53c2\u7167\u6b64\u63a5\u53e3\uff0c\u6709\u5173\u76f8\u5e94\u53c2\u6570\u7684\u679a\u4e3e\u7c7b\u578b\u5bf9\u5e94\u7684\u6574\u578b\u503c\u8bf7\u67e5\u627ePixelType.h \u548c CameraParams.h\u4e2d\u76f8\u5e94\u7684\u5b9a\u4e49
<br>
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetPixelFormat(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);
<br>
	 *  @brief  Get Pixel Format
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *          MVCC_ENUMVALUE* pstValue    [IN][OUT]   Returns the information structure pointer about pixel format for the caller
<br>
	 *          The meaning of returns pstValue structure
<br>
	 *          unsigned int    nCurValue;                              //  The current pixel format of the camera, is the enumeration type, such as PixelType_Gvsp_Mono8, here is the integer value, the specific value please refer to MvGvspPixelType enumeration type in PixelType.h
<br>
	 *          unsigned int    nSupportedNum;                          //  Number of pixel formats supported by the camera
<br>
	 *          unsigned int    nSupportValue[MV_MAX_XML_SYMBOLIC_NUM]; //  The integer values list correspond to all supported pixel formats of the camera, followed by when set the pixel format, the parameter must be one of this list, otherwise invalid
<br>
	 *  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code
<br>
	 *  
<br>
	 * Other interface of Enumeration structure parameters can refer to this interface, look for the corresponding definition in PixelType.h and CameraParams.h for the integer values of the enum type parameter
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetPixelFormat(void*, MVCC_ENUMVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1225</i>
	 */
	int MV_CC_GetPixelFormat(Pointer handle, MVCC_ENUMVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetPixelFormat(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u50cf\u7d20\u683c\u5f0f
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u8981\u8bbe\u7f6e\u7684\u50cf\u7d20\u683c\u5f0f\u5bf9\u5e94\u7684\u6574\u578b\u503c\uff0c\u8c03\u7528\u6b64\u63a5\u53e3\u65f6\u53ef\u4ee5\u76f4\u63a5\u586b\u5199\u679a\u4e3e\u503c\uff0c\u5982MV_CC_SetPixelFormat(m_handle, PixelType_Gvsp_RGB8_Packed);
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u50cf\u7d20\u683c\u5f0f\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u8981\u8bbe\u7f6e\u7684\u679a\u4e3e\u7c7b\u578b\u5fc5\u987b\u662fGet\u63a5\u53e3\u8fd4\u56de\u7684nSupportValue[MV_MAX_XML_SYMBOLIC_NUM]\u4e2d\u7684\u4e00\u79cd\uff0c\u5426\u5219\u4f1a\u5931\u8d25
<br>
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetPixelFormat(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set Pixel Format
<br>
	 *  @param  void* handle                [IN]        Camera Handle
<br>
	 *          const unsigned int nValue   [IN]        The corresponding integer value for pixel format to be set, when calling this interface can be directly filled in enumeration values, such as MV_CC_SetPixelFormat(m_handle, PixelType_Gvsp_RGB8_Packed);
<br>
	 *  @return Success, return MV_OK, and the camera pixel format will change to the corresponding value. Failure, return error code
<br>
	 *  
<br>
	 *          Other interface of Enumeration structure parameters can refer to this interface, the enumeration type to be set must be one of the nSupportValue [MV_MAX_XML_SYMBOLIC_NUM] returned by the Get interface, otherwise it will fail
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetPixelFormat(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1244</i>
	 */
	int MV_CC_SetPixelFormat(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAcquisitionMode(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u91c7\u96c6\u6a21\u5f0f
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          MVCC_ENUMVALUE* pstValue    [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u7684\u6709\u5173\u91c7\u96c6\u6a21\u5f0f\u7684\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u83b7\u5f97\u76f8\u5e94\u53c2\u6570\u4fe1\u606f\u7684\u7ed3\u6784\u4f53, \u5931\u8d25, \u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 * \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetPixelFormat\uff0c\u53c2\u8003 CameraParam.h \u4e2d\u7684 MV_CAM_ACQUISITION_MODE \u5b9a\u4e49
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAcquisitionMode(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);
<br>
	 *  @brief  Get acquisition mode
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          MVCC_ENUMVALUE* pstValue    [IN][OUT]   Structure pointer of acquisition mode
<br>
	 *  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code
<br>
	 *  
<br>
	 * Refer to MV_CC_GetPixelFormat and definition of MV_CAM_ACQUISITION_MODE in CameraParam.h
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetAcquisitionMode(void*, MVCC_ENUMVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1263</i>
	 */
	int MV_CC_GetAcquisitionMode(Pointer handle, MVCC_ENUMVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAcquisitionMode(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u50cf\u7d20\u683c\u5f0f
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u8981\u8bbe\u7f6e\u7684\u91c7\u96c6\u6a21\u5f0f\u5bf9\u5e94\u7684\u6574\u578b\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u91c7\u96c6\u6a21\u5f0f\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAcquisitionMode(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set acquisition mode
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const unsigned int nValue   [IN]        Integer value to set corresponding to acquisition mode
<br>
	 *  @return Success, return MV_OK, and the camera acquisition mode will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetAcquisitionMode(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1278</i>
	 */
	int MV_CC_SetAcquisitionMode(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetGainMode(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u589e\u76ca\u6a21\u5f0f
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          MVCC_ENUMVALUE* pstValue    [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u7684\u6709\u5173\u589e\u76ca\u6a21\u5f0f\u7684\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u83b7\u5f97\u76f8\u5e94\u53c2\u6570\u4fe1\u606f\u7684\u7ed3\u6784\u4f53, \u5931\u8d25, \u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 * \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetPixelFormat\uff0c\u53c2\u8003 CameraParam.h \u4e2d\u7684 MV_CAM_GAIN_MODE \u5b9a\u4e49
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetGainMode(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);
<br>
	 *  @brief  Get gain mode
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          MVCC_ENUMVALUE* pstValue    [IN][OUT]    Structure pointer of gain mode
<br>
	 *  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code
<br>
	 *  
<br>
	 * Refer to MV_CC_GetPixelFormat and definition of MV_CAM_GAIN_MODE in CameraParam.h
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetGainMode(void*, MVCC_ENUMVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1297</i>
	 */
	int MV_CC_GetGainMode(Pointer handle, MVCC_ENUMVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetGainMode(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u589e\u76ca\u6a21\u5f0f
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u8981\u8bbe\u7f6e\u7684\u589e\u76ca\u6a21\u5f0f\u5bf9\u5e94\u7684\u6574\u578b\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u589e\u76ca\u6a21\u5f0f\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetGainMode(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set gain mode
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const unsigned int nValue   [IN]        Integer value to set corresponding to gain mode
<br>
	 *  @return Success, return MV_OK, and the camera gain mode will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetGainMode(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1312</i>
	 */
	int MV_CC_SetGainMode(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetExposureAutoMode(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u81ea\u52a8\u66dd\u5149\u6a21\u5f0f
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          MVCC_ENUMVALUE* pstValue    [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u7684\u6709\u5173\u81ea\u52a8\u66dd\u5149\u6a21\u5f0f\u7684\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u83b7\u5f97\u76f8\u5e94\u53c2\u6570\u4fe1\u606f\u7684\u7ed3\u6784\u4f53, \u5931\u8d25, \u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 * \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetPixelFormat\uff0c\u53c2\u8003 CameraParam.h \u4e2d\u7684 MV_CAM_EXPOSURE_AUTO_MODE \u5b9a\u4e49
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetExposureAutoMode(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);
<br>
	 *  @brief  Get auto exposure mode
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          MVCC_ENUMVALUE* pstValue    [IN][OUT]   Structure pointer of auto exposure mode
<br>
	 *  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code
<br>
	 *  
<br>
	 * Refer to MV_CC_GetPixelFormat and definition of MV_CAM_EXPOSURE_AUTO_MODE in CameraParam.h
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetExposureAutoMode(void*, MVCC_ENUMVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1331</i>
	 */
	int MV_CC_GetExposureAutoMode(Pointer handle, MVCC_ENUMVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetExposureAutoMode(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u81ea\u52a8\u66dd\u5149\u6a21\u5f0f
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u8981\u8bbe\u7f6e\u7684\u81ea\u52a8\u66dd\u5149\u6a21\u5f0f\u5bf9\u5e94\u7684\u6574\u578b\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u81ea\u52a8\u66dd\u5149\u6a21\u5f0f\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetExposureAutoMode(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set auto exposure mode
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const unsigned int nValue   [IN]        Integer value to set corresponding to auto exposure mode
<br>
	 *  @return Success, return MV_OK, and the camera auto exposure mode will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetExposureAutoMode(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1346</i>
	 */
	int MV_CC_SetExposureAutoMode(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetTriggerMode(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u89e6\u53d1\u6a21\u5f0f
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          MVCC_ENUMVALUE* pstValue    [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u7684\u6709\u5173\u89e6\u53d1\u6a21\u5f0f\u7684\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u83b7\u5f97\u76f8\u5e94\u53c2\u6570\u4fe1\u606f\u7684\u7ed3\u6784\u4f53, \u5931\u8d25, \u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 * \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetPixelFormat\uff0c\u53c2\u8003 CameraParam.h \u4e2d\u7684 MV_CAM_TRIGGER_MODE \u5b9a\u4e49
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetTriggerMode(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);
<br>
	 *  @brief  Get trigger mode
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          MVCC_ENUMVALUE* pstValue    [IN][OUT]   Structure pointer of trigger mode
<br>
	 *  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code
<br>
	 *  
<br>
	 * Refer to MV_CC_GetPixelFormat and definition of MV_CAM_TRIGGER_MODE in CameraParam.h
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetTriggerMode(void*, MVCC_ENUMVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1365</i>
	 */
	int MV_CC_GetTriggerMode(Pointer handle, MVCC_ENUMVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetTriggerMode(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u89e6\u53d1\u6a21\u5f0f
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u8981\u8bbe\u7f6e\u7684\u89e6\u53d1\u6a21\u5f0f\u5bf9\u5e94\u7684\u6574\u578b\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u89e6\u53d1\u6a21\u5f0f\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetTriggerMode(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set trigger mode
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const unsigned int nValue   [IN]        Integer value to set corresponding to trigger mode
<br>
	 *  @return Success, return MV_OK, and the camera trigger mode will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetTriggerMode(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1380</i>
	 */
	int MV_CC_SetTriggerMode(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetTriggerDelay(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u89e6\u53d1\u5ef6\u65f6
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          MVCC_FLOATVALUE* pstValue   [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u89e6\u53d1\u5ef6\u65f6\u7684\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u83b7\u5f97\u76f8\u5e94\u53c2\u6570\u4fe1\u606f\u7684\u7ed3\u6784\u4f53, \u5931\u8d25, \u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetFrameRate
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetTriggerDelay(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);
<br>
	 *  @brief  Get tigger delay
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          MVCC_FLOATVALUE* pstValue   [IN][OUT]   Structure pointer of trigger delay
<br>
	 *  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetFrameRate
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetTriggerDelay(void*, MVCC_FLOATVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1399</i>
	 */
	int MV_CC_GetTriggerDelay(Pointer handle, MVCC_FLOATVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetTriggerDelay(IN void* handle, IN const float fValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u89e6\u53d1\u5ef6\u65f6
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const float fValue          [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673a\u89e6\u53d1\u5ef6\u65f6
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u89e6\u53d1\u5ef6\u65f6\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetTriggerDelay(IN void* handle, IN const float fValue);
<br>
	 *  @brief  Set tigger delay
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const float fValue          [IN]        Trigger delay to set
<br>
	 *  @return Success, return MV_OK, and the camera trigger delay will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetTriggerDelay(void*, const float)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1414</i>
	 */
	int MV_CC_SetTriggerDelay(Pointer handle, float fValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetTriggerSource(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u89e6\u53d1\u6e90
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          MVCC_ENUMVALUE* pstValue    [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u7684\u6709\u5173\u89e6\u53d1\u6e90\u7684\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u83b7\u5f97\u76f8\u5e94\u53c2\u6570\u4fe1\u606f\u7684\u7ed3\u6784\u4f53, \u5931\u8d25, \u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 * \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetPixelFormat\uff0c\u53c2\u8003 CameraParam.h \u4e2d\u7684 MV_CAM_TRIGGER_SOURCE \u5b9a\u4e49
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetTriggerSource(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);
<br>
	 *  @brief  Get trigger source
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          MVCC_ENUMVALUE* pstValue    [IN][OUT]   Structure pointer of trigger source
<br>
	 *  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code
<br>
	 *  
<br>
	 * Refer to MV_CC_GetPixelFormat and definition of MV_CAM_TRIGGER_SOURCE in CameraParam.h
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetTriggerSource(void*, MVCC_ENUMVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1433</i>
	 */
	int MV_CC_GetTriggerSource(Pointer handle, MVCC_ENUMVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetTriggerSource(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u89e6\u53d1\u6e90
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u8981\u8bbe\u7f6e\u7684\u89e6\u53d1\u6e90\u5bf9\u5e94\u7684\u6574\u578b\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u89e6\u53d1\u6e90\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetTriggerSource(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set trigger source
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const unsigned int nValue   [IN]        Integer value to set corresponding to trigger source
<br>
	 *  @return Success, return MV_OK, and the camera trigger source will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetTriggerSource(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1448</i>
	 */
	int MV_CC_SetTriggerSource(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_TriggerSoftwareExecute(IN void* handle);
<br>
	 *  @brief  \u8f6f\u89e6\u53d1\u4e00\u6b21\uff08\u63a5\u53e3\u4ec5\u5728\u5df2\u9009\u62e9\u7684\u89e6\u53d1\u6e90\u4e3a\u8f6f\u4ef6\u89e6\u53d1\u65f6\u6709\u6548\uff09
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK, \u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_TriggerSoftwareExecute(IN void* handle);
<br>
	 *  @brief  Execute software trigger once (this interface only valid when the trigger source is set to software)
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_TriggerSoftwareExecute(void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1461</i>
	 */
	int MV_CC_TriggerSoftwareExecute(Pointer handle);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetGammaSelector(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6Gamma\u7c7b\u578b
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          MVCC_ENUMVALUE* pstValue    [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u7684\u6709\u5173Gamma\u7c7b\u578b\u7684\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u83b7\u5f97\u76f8\u5e94\u53c2\u6570\u4fe1\u606f\u7684\u7ed3\u6784\u4f53, \u5931\u8d25, \u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 * \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetPixelFormat\uff0c\u53c2\u8003 CameraParam.h \u4e2d\u7684 MV_CAM_GAMMA_SELECTOR \u5b9a\u4e49
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetGammaSelector(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);
<br>
	 *  @brief  Get Gamma mode
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          MVCC_ENUMVALUE* pstValue    [IN][OUT]   Structure pointer of gamma mode
<br>
	 *  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code
<br>
	 *  
<br>
	 * Refer to MV_CC_GetPixelFormat and definition of MV_CAM_GAMMA_SELECTOR in CameraParam.h
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetGammaSelector(void*, MVCC_ENUMVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1480</i>
	 */
	int MV_CC_GetGammaSelector(Pointer handle, MVCC_ENUMVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetGammaSelector(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6eGamma\u7c7b\u578b
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u8981\u8bbe\u7f6e\u7684Gamma\u7c7b\u578b\u5bf9\u5e94\u7684\u6574\u578b\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673aGamma\u7c7b\u578b\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetGammaSelector(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set Gamma mode
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const unsigned int nValue   [IN]        Integer value to set corresponding to gamma mode
<br>
	 *  @return Success, return MV_OK, and the camera gamma mode will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetGammaSelector(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1495</i>
	 */
	int MV_CC_SetGammaSelector(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetGamma(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6Gamma\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          MVCC_FLOATVALUE* pstValue   [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673aGamma\u503c\u7684\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u83b7\u5f97\u76f8\u5e94\u53c2\u6570\u4fe1\u606f\u7684\u7ed3\u6784\u4f53, \u5931\u8d25, \u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetFrameRate
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetGamma(IN void* handle, IN OUT MVCC_FLOATVALUE* pstValue);
<br>
	 *  @brief  Get Gamma value
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          MVCC_FLOATVALUE* pstValue   [IN][OUT]   Structure pointer of gamma value
<br>
	 *  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetFrameRate
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetGamma(void*, MVCC_FLOATVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1514</i>
	 */
	int MV_CC_GetGamma(Pointer handle, MVCC_FLOATVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetGamma(IN void* handle, IN const float fValue);
<br>
	 *  @brief  \u8bbe\u7f6eGamma\u503c
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const float fValue          [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u76f8\u673aGamma\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673aGamma\u503c\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetGamma(IN void* handle, IN const float fValue);
<br>
	 *  @brief  Set Gamma value
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const float fValue          [IN]        Gamma value to set
<br>
	 *  @return Success, return MV_OK, and the camera gamma value will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetGamma(void*, const float)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1529</i>
	 */
	int MV_CC_SetGamma(Pointer handle, float fValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetSharpness(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u9510\u5ea6
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u9510\u5ea6\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetWidth
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetSharpness(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  Get sharpness
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of sharpness
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetWidth
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetSharpness(void*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1548</i>
	 */
	int MV_CC_GetSharpness(Pointer handle, MVCC_INTVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetSharpness(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u9510\u5ea6
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u9510\u5ea6
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u9510\u5ea6\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetSharpness(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set sharpness
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const unsigned int nValue   [IN]        Sharpness to set
<br>
	 *  @return Success, return MV_OK, and the camera sharpness will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetSharpness(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1563</i>
	 */
	int MV_CC_SetSharpness(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetHue(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u7070\u5ea6
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u7070\u5ea6\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetWidth
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetHue(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  Get Hue
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of Hue
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetWidth
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetHue(void*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1582</i>
	 */
	int MV_CC_GetHue(Pointer handle, MVCC_INTVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetHue(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u7070\u5ea6
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u7070\u5ea6
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u7070\u5ea6\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetHue(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set Hue
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const unsigned int nValue   [IN]        Hue to set
<br>
	 *  @return Success, return MV_OK, and the camera Hue will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetHue(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1597</i>
	 */
	int MV_CC_SetHue(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetSaturation(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u9971\u548c\u5ea6
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u9971\u548c\u5ea6\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetWidth
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetSaturation(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  Get Saturation
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of Saturation
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetWidth
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetSaturation(void*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1616</i>
	 */
	int MV_CC_GetSaturation(Pointer handle, MVCC_INTVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetSaturation(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u9971\u548c\u5ea6
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u9971\u548c\u5ea6
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u9971\u548c\u5ea6\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetSaturation(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set Saturation
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const unsigned int nValue   [IN]        Saturation to set
<br>
	 *  @return Success, return MV_OK, and the camera Saturation will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetSaturation(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1631</i>
	 */
	int MV_CC_SetSaturation(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBalanceWhiteAuto(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u81ea\u52a8\u767d\u5e73\u8861
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          MVCC_ENUMVALUE* pstValue    [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u7684\u6709\u5173\u81ea\u52a8\u767d\u5e73\u8861\u7684\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u83b7\u5f97\u76f8\u5e94\u53c2\u6570\u4fe1\u606f\u7684\u7ed3\u6784\u4f53, \u5931\u8d25, \u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 * \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetPixelFormat\uff0c\u53c2\u8003 CameraParam.h \u4e2d\u7684 MV_CAM_BALANCEWHITE_AUTO \u5b9a\u4e49
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBalanceWhiteAuto(IN void* handle, IN OUT MVCC_ENUMVALUE* pstValue);
<br>
	 *  @brief  Get Auto white balance
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          MVCC_ENUMVALUE* pstValue    [IN][OUT]   Structure pointer of auto white balance
<br>
	 *  @return Success, return MV_OK, and get the structure of the corresponding parameters. Failure, return error code
<br>
	 *  
<br>
	 * Refer to MV_CC_GetPixelFormat and definition of MV_CAM_BALANCEWHITE_AUTO in CameraParam.h
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetBalanceWhiteAuto(void*, MVCC_ENUMVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1650</i>
	 */
	int MV_CC_GetBalanceWhiteAuto(Pointer handle, MVCC_ENUMVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBalanceWhiteAuto(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u81ea\u52a8\u767d\u5e73\u8861
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u8981\u8bbe\u7f6e\u7684\u81ea\u52a8\u767d\u5e73\u8861\u5bf9\u5e94\u7684\u6574\u578b\u503c
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u81ea\u52a8\u767d\u5e73\u8861\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBalanceWhiteAuto(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set Auto white balance
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const unsigned int nValue   [IN]        Integer value to set corresponding to auto white balance
<br>
	 *  @return Success, return MV_OK, and the camera auto white balance will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetBalanceWhiteAuto(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1665</i>
	 */
	int MV_CC_SetBalanceWhiteAuto(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBalanceRatioRed(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u767d\u5e73\u8861 \u7ea2
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u767d\u5e73\u8861 \u7ea2\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetWidth
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBalanceRatioRed(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  Get white balance red
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of white balance red
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetWidth
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetBalanceRatioRed(void*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1684</i>
	 */
	int MV_CC_GetBalanceRatioRed(Pointer handle, MVCC_INTVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBalanceRatioRed(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u767d\u5e73\u8861 \u7ea2
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u767d\u5e73\u8861 \u7ea2
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u767d\u5e73\u8861 \u7ea2\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBalanceRatioRed(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set white balance red
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const unsigned int nValue   [IN]        White balance red to set
<br>
	 *  @return Success, return MV_OK, and the camera white balance red will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetBalanceRatioRed(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1699</i>
	 */
	int MV_CC_SetBalanceRatioRed(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBalanceRatioGreen(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u767d\u5e73\u8861 \u7eff
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u767d\u5e73\u8861 \u7eff\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetWidth
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBalanceRatioGreen(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  Get white balance green
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of white balance green
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetWidth
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetBalanceRatioGreen(void*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1718</i>
	 */
	int MV_CC_GetBalanceRatioGreen(Pointer handle, MVCC_INTVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBalanceRatioGreen(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u767d\u5e73\u8861 \u7eff
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u767d\u5e73\u8861 \u7eff
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u767d\u5e73\u8861 \u7eff\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBalanceRatioGreen(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set white balance green
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const unsigned int nValue   [IN]        White balance green to set
<br>
	 *  @return Success, return MV_OK, and the camera white balance green will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetBalanceRatioGreen(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1733</i>
	 */
	int MV_CC_SetBalanceRatioGreen(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBalanceRatioBlue(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u767d\u5e73\u8861 \u84dd
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u767d\u5e73\u8861 \u84dd\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetWidth
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBalanceRatioBlue(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  Get white balance blue
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of white balance blue
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetWidth
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetBalanceRatioBlue(void*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1752</i>
	 */
	int MV_CC_GetBalanceRatioBlue(Pointer handle, MVCC_INTVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBalanceRatioBlue(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u767d\u5e73\u8861 \u84dd
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u767d\u5e73\u8861 \u84dd
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u767d\u5e73\u8861 \u84dd\u5c06\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBalanceRatioBlue(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set white balance blue
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const unsigned int nValue   [IN]        White balance blue to set
<br>
	 *  @return Success, return MV_OK, and the camera white balance blue will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetBalanceRatioBlue(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1767</i>
	 */
	int MV_CC_SetBalanceRatioBlue(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetFrameSpecInfoAbility(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u6c34\u5370\u4fe1\u606f\u5185\u5305\u542b\u7684\u4fe1\u606f\u7c7b\u578b
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u6c34\u5370\u4fe1\u606f\u5185\u5305\u542b\u7684\u4fe1\u606f\u7c7b\u578b\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetWidth
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetFrameSpecInfoAbility(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  Get information type included by frame stamp
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of information type included by frame stamp
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetWidth
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetFrameSpecInfoAbility(void*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1786</i>
	 */
	int MV_CC_GetFrameSpecInfoAbility(Pointer handle, MVCC_INTVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetFrameSpecInfoAbility(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u6c34\u5370\u4fe1\u606f\u5185\u5305\u542b\u7684\u4fe1\u606f\u7c7b\u578b
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u6c34\u5370\u4fe1\u606f\u5185\u5305\u542b\u7684\u4fe1\u606f\u7c7b\u578b
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u6c34\u5370\u4fe1\u606f\u5185\u5305\u542b\u7684\u4fe1\u606f\u7c7b\u578b\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetFrameSpecInfoAbility(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set information type included by frame stamp
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const unsigned int nValue   [IN]        Information type included by frame stamp to set
<br>
	 *  @return Success, return MV_OK, and the camera information type included by frame stamp will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetFrameSpecInfoAbility(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1801</i>
	 */
	int MV_CC_SetFrameSpecInfoAbility(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetDeviceUserID(IN void* handle, IN OUT MVCC_STRINGVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u8bbe\u5907\u81ea\u5b9a\u4e49\u540d\u5b57
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          MVCC_STRINGVALUE* pstValue  [IN OUT]    \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u540d\u5b57\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u83b7\u53d6\u5230\u76f8\u673a\u7684\u81ea\u5b9a\u4e49\u540d\u5b57\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetDeviceUserID(IN void* handle, IN OUT MVCC_STRINGVALUE* pstValue);
<br>
	 *  @brief  Get device user defined name
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          MVCC_STRINGVALUE* pstValue  [IN OUT]    Structure pointer of device name
<br>
	 *  @return Success, return MV_OK, and get the camera user defined name. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetDeviceUserID(void*, MVCC_STRINGVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1816</i>
	 */
	int MV_CC_GetDeviceUserID(Pointer handle, MVCC_STRINGVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetDeviceUserID(IN void* handle, IN const char* chValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u8bbe\u5907\u81ea\u5b9a\u4e49\u540d\u5b57
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          IN const char* chValue      [IN]        \u8bbe\u5907\u540d\u5b57
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u8bbe\u7f6e\u8bbe\u5907\u81ea\u5b9a\u4e49\u540d\u5b57\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetDeviceUserID(IN void* handle, IN const char* chValue);
<br>
	 *  @brief  Set device user defined name
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          IN const char* chValue      [IN]        Device name
<br>
	 *  @return Success, return MV_OK, and set the camera user defined name. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetDeviceUserID(void*, const char*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1831</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_SetDeviceUserID(Pointer, String)} and {@link #MV_CC_SetDeviceUserID(Pointer, Pointer)} instead
	 */
	@Deprecated 
	int MV_CC_SetDeviceUserID(Pointer handle, Pointer chValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetDeviceUserID(IN void* handle, IN const char* chValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u8bbe\u5907\u81ea\u5b9a\u4e49\u540d\u5b57
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          IN const char* chValue      [IN]        \u8bbe\u5907\u540d\u5b57
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u8bbe\u7f6e\u8bbe\u5907\u81ea\u5b9a\u4e49\u540d\u5b57\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetDeviceUserID(IN void* handle, IN const char* chValue);
<br>
	 *  @brief  Set device user defined name
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          IN const char* chValue      [IN]        Device name
<br>
	 *  @return Success, return MV_OK, and set the camera user defined name. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetDeviceUserID(void*, const char*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1831</i>
	 */
	int MV_CC_SetDeviceUserID(Pointer handle, String chValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBurstFrameCount(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u4e00\u6b21\u89e6\u53d1\u7684\u5e27\u6570
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u4e00\u6b21\u89e6\u53d1\u7684\u5e27\u6570\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetWidth
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetBurstFrameCount(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  Get frame number trigger by once
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of frame number trigger by once
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetWidth
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetBurstFrameCount(void*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1850</i>
	 */
	int MV_CC_GetBurstFrameCount(Pointer handle, MVCC_INTVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBurstFrameCount(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u4e00\u6b21\u89e6\u53d1\u7684\u5e27\u6570
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u4e00\u6b21\u89e6\u53d1\u7684\u5e27\u6570
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u4e00\u6b21\u89e6\u53d1\u7684\u5e27\u6570\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetBurstFrameCount(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set frame number trigger by once
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const unsigned int nValue   [IN]        Frame number trigger by once to set
<br>
	 *  @return Success, return MV_OK, and the camera frame number trigger by once will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetBurstFrameCount(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1865</i>
	 */
	int MV_CC_SetBurstFrameCount(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAcquisitionLineRate(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u884c\u9891
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u884c\u9891\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetWidth
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetAcquisitionLineRate(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  Get line rate
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of line rate
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetWidth
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetAcquisitionLineRate(void*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1884</i>
	 */
	int MV_CC_GetAcquisitionLineRate(Pointer handle, MVCC_INTVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAcquisitionLineRate(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u884c\u9891
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u884c\u9891
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u884c\u9891\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetAcquisitionLineRate(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set line rate
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const unsigned int nValue   [IN]        Line rate to set
<br>
	 *  @return Success, return MV_OK, and the camera line rate will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetAcquisitionLineRate(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1899</i>
	 */
	int MV_CC_SetAcquisitionLineRate(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetHeartBeatTimeout(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u5fc3\u8df3\u4fe1\u606f
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u5fc3\u8df3\u4fe1\u606f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetWidth
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetHeartBeatTimeout(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  Get heartbeat information
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of heartbeat information
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetWidth
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetHeartBeatTimeout(void*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1918</i>
	 */
	int MV_CC_GetHeartBeatTimeout(Pointer handle, MVCC_INTVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetHeartBeatTimeout(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u5fc3\u8df3\u4fe1\u606f
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u5fc3\u8df3\u4fe1\u606f
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u5fc3\u8df3\u4fe1\u606f\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_SetHeartBeatTimeout(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set heartbeat information
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const unsigned int nValue   [IN]        Heartbeat information to set
<br>
	 *  @return Success, return MV_OK, and the camera heartbeat information will change to the corresponding value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetHeartBeatTimeout(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1933</i>
	 */
	int MV_CC_SetHeartBeatTimeout(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_LocalUpgrade(IN void* handle, 
<br>
	 * const void *pFilePathName);
<br>
	 *  @brief  \u8bbe\u5907\u672c\u5730\u5347\u7ea7
<br>
	 *  @param  void* handle                  [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  void *pFilePathName           [IN]        \u6587\u4ef6\u540d
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_LocalUpgrade(IN void* handle, 
<br>
	 * const void *pFilePathName);
<br>
	 *  @brief  Device Local Upgrade
<br>
	 *  @param  void* handle                  [IN]        Camera handle
<br>
	 *  @param  void *pFilePathName           [IN]        File name
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_LocalUpgrade(void*, const void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1959</i>
	 */
	int MV_CC_LocalUpgrade(Pointer handle, Pointer pFilePathName);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetUpgradeProcess(IN void* handle,
<br>
	 * unsigned int* pnProcess);
<br>
	 *  @brief  \u83b7\u53d6\u5347\u7ea7\u8fdb\u5ea6
<br>
	 *  @param  void* handle                  [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  unsigned int* pnProcess       [OUT]       \u8fdb\u5ea6\u63a5\u6536\u5730\u5740
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetUpgradeProcess(IN void* handle,
<br>
	 * unsigned int* pnProcess);
<br>
	 *  @brief  Get Upgrade Progress
<br>
	 *  @param  void* handle                  [IN]        Camera handle
<br>
	 *  @param  unsigned int* pnProcess       [OUT]       Progress receiving address
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetUpgradeProcess(void*, unsigned int*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1976</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_GetUpgradeProcess(Pointer, IntBuffer)} and {@link #MV_CC_GetUpgradeProcess(Pointer, IntByReference)} instead
	 */
	@Deprecated 
	int MV_CC_GetUpgradeProcess(Pointer handle, IntByReference pnProcess);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetUpgradeProcess(IN void* handle,
<br>
	 * unsigned int* pnProcess);
<br>
	 *  @brief  \u83b7\u53d6\u5347\u7ea7\u8fdb\u5ea6
<br>
	 *  @param  void* handle                  [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  unsigned int* pnProcess       [OUT]       \u8fdb\u5ea6\u63a5\u6536\u5730\u5740
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetUpgradeProcess(IN void* handle,
<br>
	 * unsigned int* pnProcess);
<br>
	 *  @brief  Get Upgrade Progress
<br>
	 *  @param  void* handle                  [IN]        Camera handle
<br>
	 *  @param  unsigned int* pnProcess       [OUT]       Progress receiving address
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetUpgradeProcess(void*, unsigned int*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1976</i>
	 */
	int MV_CC_GetUpgradeProcess(Pointer handle, IntBuffer pnProcess);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetOptimalPacketSize(IN void* handle);
<br>
	 *  @brief  \u83b7\u53d6\u6700\u4f73\u7684packet size\uff0c\u8be5\u63a5\u53e3\u76ee\u524d\u53ea\u652f\u6301GigE\u76f8\u673a
<br>
	 *  @param  void* handle                  [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @return \u6700\u4f73packetsize
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_CC_GetOptimalPacketSize(IN void* handle);
<br>
	 *  @brief  Get the optimal Packet Size, Only support GigE Camera
<br>
	 *  @param  void* handle                  [IN]        Camera handle
<br>
	 *  @return Optimal packetsize
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetOptimalPacketSize(void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:1989</i>
	 */
	int MV_CC_GetOptimalPacketSize(Pointer handle);
	/**
	 * @fn     MV_CC_ReadMemory
<br>
	 *  @brief  \u8bfb\u5185\u5b58
<br>
	 *  @param  handle\uff1a\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  pBuffer\uff1a\u4f5c\u4e3a\u8fd4\u56de\u503c\u4f7f\u7528\uff0c\u4fdd\u5b58\u8bfb\u5230\u7684\u5185\u5b58\u503c\uff08\u5185\u5b58\u503c\u662f\u6309\u7167\u5927\u7aef\u6a21\u5f0f\u5b58\u50a8\u7684\uff09
<br>
	 *  @param  nAddress\uff1a\u5f85\u8bfb\u53d6\u7684\u5185\u5b58\u5730\u5740\uff0c\u8be5\u5730\u5740\u53ef\u4ee5\u4ece\u8bbe\u5907\u7684Camera.xml\u6587\u4ef6\u4e2d\u83b7\u53d6\uff0c\u5f62\u5982xxx_RegAddr\u7684xml\u8282\u70b9\u503c
<br>
	 * \uff08\u8bbe\u5907\u7684Camera.xml\u6587\u4ef6\u4f1a\u5728\u8bbe\u5907\u6253\u5f00\u4e4b\u540e\u81ea\u52a8\u751f\u6210\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u5f53\u524d\u76ee\u5f55\u4e2d\uff09
<br>
	 *  @param  nLength\uff1a\u5f85\u8bfb\u53d6\u7684\u5185\u5b58\u957f\u5ea6
<br>
	 *  @return \u89c1\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CC_ReadMemory
<br>
	 *  @brief  Read Memory
<br>
	 *  @param  handle: Device Handle
<br>
	 *  @param  pBuffer: Used as a return value, save the read-in memory value ( Memory value is stored in accordance with the big end model)
<br>
	 *  @param  nAddress: Memory address to be read, which can be obtained from the Camera.xml file of the device, the form xml node value of xxx_RegAddr
<br>
	 * (Camera.xml file of device is automatically generated in the application's current directory after the device is opened)
<br>
	 *  @param  nLength: Length of the memory to be read
<br>
	 *  @return Refer to the return error code
<br>
	 * ***********************************************************************<br>
	 * Original signature : <code>int MV_CC_ReadMemory(void*, void*, int64_t, int64_t)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2010</i>
	 */
	int MV_CC_ReadMemory(Pointer handle, Pointer pBuffer, long nAddress, long nLength);
	/**
	 * @fn     MV_CC_WriteMemory
<br>
	 *  @brief  \u5199\u5185\u5b58
<br>
	 *  @param  handle\uff1a\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  pBuffer\uff1a\u5f85\u5199\u5165\u7684\u5185\u5b58\u503c\uff08\u6ce8\u610f\u5185\u5b58\u503c\u8981\u6309\u7167\u5927\u7aef\u6a21\u5f0f\u5b58\u50a8\uff09
<br>
	 *  @param  nAddress\uff1a\u5f85\u5199\u5165\u7684\u5185\u5b58\u5730\u5740\uff0c\u8be5\u5730\u5740\u53ef\u4ee5\u4ece\u8bbe\u5907\u7684Camera.xml\u6587\u4ef6\u4e2d\u83b7\u53d6\uff0c\u5f62\u5982xxx_RegAddr\u7684xml\u8282\u70b9\u503c
<br>
	 * \uff08\u8bbe\u5907\u7684Camera.xml\u6587\u4ef6\u4f1a\u5728\u8bbe\u5907\u6253\u5f00\u4e4b\u540e\u81ea\u52a8\u751f\u6210\u5728\u5e94\u7528\u7a0b\u5e8f\u7684\u5f53\u524d\u76ee\u5f55\u4e2d\uff09
<br>
	 *  @param  nLength\uff1a\u5f85\u5199\u5165\u7684\u5185\u5b58\u957f\u5ea6
<br>
	 *  @return \u89c1\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CC_WriteMemory
<br>
	 *  @brief  Write Memory
<br>
	 *  @param  handle: Device Handle
<br>
	 *  @param  pBuffer: Memory value to be written ( Note the memory value to be stored in accordance with the big end model)
<br>
	 *  @param  nAddress: Memory address to be written, which can be obtained from the Camera.xml file of the device, the form xml node value of xxx_RegAddr
<br>
	 * (Camera.xml file of device is automatically generated in the application's current directory after the device is opened)
<br>
	 *  @param  nLength: Length of the memory to be written
<br>
	 *  @return Refer to the return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_WriteMemory(void*, const void*, int64_t, int64_t)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2031</i>
	 */
	int MV_CC_WriteMemory(Pointer handle, Pointer pBuffer, long nAddress, long nLength);
	/**
	 * @fn     MV_CC_RegisterExceptionCallBack
<br>
	 *  @brief  \u6ce8\u518c\u5f02\u5e38\u6d88\u606f\u56de\u8c03\uff0c\u5728\u6253\u5f00\u8bbe\u5907\u4e4b\u540e\u8c03\u7528
<br>
	 *  @param  handle\uff1a\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  cbException       [IN]      \u5f02\u5e38\u56de\u8c03\u51fd\u6570\u6307\u9488
<br>
	 *  @param  pUser             [IN]      \u7528\u6237\u81ea\u5b9a\u4e49\u53d8\u91cf
<br>
	 *  @return \u89c1\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CC_RegisterExceptionCallBack
<br>
	 *  @brief  Register Exception Message CallBack, call after open device
<br>
	 *  @param  handle: Device handle
<br>
	 *  @param  cbException       [IN]       Exception Message CallBack Function Pointer
<br>
	 *  @param  pUser             [IN]       User defined variable
<br>
	 *  @return Refer to error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_RegisterExceptionCallBack(void*, MV_CC_RegisterExceptionCallBack_cbException_callback*, void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2050</i>
	 */
	int MV_CC_RegisterExceptionCallBack(Pointer handle, MV_CC_RegisterExceptionCallBack_cbException_callback cbException, Pointer pUser);
	/**
	 * @fn     MV_CC_RegisterAllEventCallBack
<br>
	 *  @brief  \u6ce8\u518c\u5168\u90e8\u4e8b\u4ef6\u56de\u8c03\uff0c\u5728\u6253\u5f00\u8bbe\u5907\u4e4b\u540e\u8c03\u7528,\u53ea\u652f\u6301GIGE
<br>
	 *  @param  handle\uff1a\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  cbEvent           [IN]      \u5f02\u5e38\u56de\u8c03\u51fd\u6570\u6307\u9488
<br>
	 *  @param  pUser             [IN]      \u7528\u6237\u81ea\u5b9a\u4e49\u53d8\u91cf
<br>
	 *  @return \u89c1\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CC_RegisterEventCallBack
<br>
	 *  @brief  Register event callback, which is called after the device is opened
<br>
	 *  @param  handle: Device handel
<br>
	 *  @param  cbEvent           [IN]      Exception CallBack Function Pointer
<br>
	 *  @param  pUser             [IN]      User defined variable
<br>
	 *  @return Refer to error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_RegisterAllEventCallBack(void*, MV_CC_RegisterAllEventCallBack_cbEvent_callback*, void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2069</i>
	 */
	int MV_CC_RegisterAllEventCallBack(Pointer handle, MV_CC_RegisterAllEventCallBack_cbEvent_callback cbEvent, Pointer pUser);
	/**
	 * @fn     MV_CC_RegisterEventCallBackEx
<br>
	 *  @brief  \u6ce8\u518c\u5355\u4e2a\u4e8b\u4ef6\u56de\u8c03\uff0c\u5728\u6253\u5f00\u8bbe\u5907\u4e4b\u540e\u8c03\u7528,\u53ea\u652f\u6301GIGE
<br>
	 *  @param  handle\uff1a\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  pEventName        [IN]      \u4e8b\u4ef6\u540d\u79f0
<br>
	 *  @param  cbEvent           [IN]      \u5f02\u5e38\u56de\u8c03\u51fd\u6570\u6307\u9488
<br>
	 *  @param  pUser             [IN]      \u7528\u6237\u81ea\u5b9a\u4e49\u53d8\u91cf
<br>
	 *  @return \u89c1\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_RegisterEventCallBackEx(void*, const char*, MV_CC_RegisterEventCallBackEx_cbEvent_callback*, void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2084</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_RegisterEventCallBackEx(Pointer, String, MV_CC_RegisterEventCallBackEx_cbEvent_callback, Pointer)} and {@link #MV_CC_RegisterEventCallBackEx(Pointer, Pointer, MV_CC_RegisterEventCallBackEx_cbEvent_callback, Pointer)} instead
	 */
	@Deprecated 
	int MV_CC_RegisterEventCallBackEx(Pointer handle, Pointer pEventName, MV_CC_RegisterEventCallBackEx_cbEvent_callback cbEvent, Pointer pUser);
	/**
	 * @fn     MV_CC_RegisterEventCallBackEx
<br>
	 *  @brief  \u6ce8\u518c\u5355\u4e2a\u4e8b\u4ef6\u56de\u8c03\uff0c\u5728\u6253\u5f00\u8bbe\u5907\u4e4b\u540e\u8c03\u7528,\u53ea\u652f\u6301GIGE
<br>
	 *  @param  handle\uff1a\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  pEventName        [IN]      \u4e8b\u4ef6\u540d\u79f0
<br>
	 *  @param  cbEvent           [IN]      \u5f02\u5e38\u56de\u8c03\u51fd\u6570\u6307\u9488
<br>
	 *  @param  pUser             [IN]      \u7528\u6237\u81ea\u5b9a\u4e49\u53d8\u91cf
<br>
	 *  @return \u89c1\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_RegisterEventCallBackEx(void*, const char*, MV_CC_RegisterEventCallBackEx_cbEvent_callback*, void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2084</i>
	 */
	int MV_CC_RegisterEventCallBackEx(Pointer handle, String pEventName, MV_CC_RegisterEventCallBackEx_cbEvent_callback cbEvent, Pointer pUser);
	/**
	 * @fn     MV_GIGE_ForceIpEx
<br>
	 *  @brief  \u5f3a\u5236IP
<br>
	 *  @param  handle\uff1a\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  nIP               [IN]      \u8bbe\u7f6e\u7684IP
<br>
	 *  @param  nSubNetMask       [IN]      \u5b50\u7f51\u63a9\u7801
<br>
	 *  @param  nDefaultGateWay   [IN]      \u9ed8\u8ba4\u7f51\u5173
<br>
	 *  @return \u89c1\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_GIGE_ForceIpEx
<br>
	 *  @brief  Force IP
<br>
	 *  @param  handle: Device handel
<br>
	 *  @param  nIP               [IN]      IP to set
<br>
	 *  @param  nSubNetMask       [IN]      Subnet mask
<br>
	 *  @param  nDefaultGateWay   [IN]      Default gateway
<br>
	 *  @return Refer to error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_GIGE_ForceIpEx(void*, unsigned int, unsigned int, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2110</i>
	 */
	int MV_GIGE_ForceIpEx(Pointer handle, int nIP, int nSubNetMask, int nDefaultGateWay);
	/**
	 * @fn     MV_GIGE_SetIpConfig
<br>
	 *  @brief  \u914d\u7f6eIP\u65b9\u5f0f
<br>
	 *  @param  handle\uff1a\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  nType               [IN]      IP\u7c7b\u578b\uff0c\u89c1MV_IP_CFG_x
<br>
	 *  @return \u89c1\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_GIGE_SetIpConfig
<br>
	 *  @brief  IP configuration method
<br>
	 *  @param  handle: Device handel
<br>
	 *  @param  nType               [IN]      IP type, refer to MV_IP_CFG_x
<br>
	 *  @return Refer to error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_GIGE_SetIpConfig(void*, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2128</i>
	 */
	int MV_GIGE_SetIpConfig(Pointer handle, int nType);
	/**
	 * @fn     MV_GIGE_SetNetTransMode
<br>
	 *  @brief  \u8bbe\u7f6e\u4ec5\u4f7f\u7528\u67d0\u79cd\u6a21\u5f0f,type: MV_NET_TRANS_x\uff0c\u4e0d\u8bbe\u7f6e\u65f6\uff0c\u9ed8\u8ba4\u4f18\u5148\u4f7f\u7528driver
<br>
	 *  @param  handle\uff1a\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  nType               [IN]      \u7f51\u7edc\u4f20\u8f93\u6a21\u5f0f\uff0c\u89c1MV_NET_TRANS_x
<br>
	 *  @return \u89c1\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_GIGE_SetNetTransMode
<br>
	 *  @brief  Set to use only one mode,type: MV_NET_TRANS_x. When do not set, priority is to use driver by default
<br>
	 *  @param  handle: Device handel
<br>
	 *  @param  nType               [IN]      Net transmission mode, refer to MV_NET_TRANS_x
<br>
	 *  @return Refer to error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_GIGE_SetNetTransMode(void*, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2143</i>
	 */
	int MV_GIGE_SetNetTransMode(Pointer handle, int nType);
	/**
	 * @fn     MV_GIGE_GetNetTransInfo
<br>
	 *  @brief  \u83b7\u53d6\u7f51\u7edc\u4f20\u8f93\u4fe1\u606f
<br>
	 *  @param  handle\uff1a\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  pstInfo             [OUT]      \u4fe1\u606f\u7ed3\u6784\u4f53
<br>
	 *  @return \u89c1\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_GIGE_GetNetTransInfo
<br>
	 *  @brief  Get net transmission information
<br>
	 *  @param  handle: Device handel
<br>
	 *  @param  pstInfo             [OUT]      Information Structure
<br>
	 *  @return Refer to error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_GIGE_GetNetTransInfo(void*, MV_NETTRANS_INFO*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2158</i>
	 */
	int MV_GIGE_GetNetTransInfo(Pointer handle, MV_NETTRANS_INFO pstInfo);
	/**
	 * @fn     MV_GIGE_SetGvcpTimeout
<br>
	 *  @brief  \u8bbe\u7f6eGVCP\u547d\u4ee4\u8d85\u65f6\u65f6\u95f4
<br>
	 *  @param  handle                 [IN]           \u53e5\u67c4\u5730\u5740
<br>
	 *  @param  nMillisec              [IN]           \u8d85\u65f6\u65f6\u95f4\uff0c\u4ee5\u6beb\u79d2\u4f4d\u5355\u4f4d\uff0c\u8303\u56f4\uff1a0-10000
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_GIGE_SetGvcpTimeout
<br>
	 *  @brief  Set GVCP cammand timeout
<br>
	 *  @param  handle                 [IN]           Handle
<br>
	 *  @param  nMillisec              [IN]           Timeout, ms as unit, range: 0-10000
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_GIGE_SetGvcpTimeout(void*, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2173</i>
	 */
	int MV_GIGE_SetGvcpTimeout(Pointer handle, int nMillisec);
	/**
	 * @fn     MV_GIGE_SetResend
<br>
	 *  @brief  \u8bbe\u7f6e\u662f\u5426\u6253\u5f00\u91cd\u53d1\u5305\u652f\u6301\uff0c\u53ca\u91cd\u53d1\u5305\u8bbe\u7f6e
<br>
	 *  @param  handle                 [IN]           \u53e5\u67c4\u5730\u5740
<br>
	 *  @param  bEnable                [IN]           \u662f\u5426\u652f\u6301\u91cd\u53d1\u5305
<br>
	 *  @param  nMaxResendPercent      [IN]           \u6700\u5927\u91cd\u53d1\u6bd4
<br>
	 *  @param  nResendTimeout         [IN]           \u91cd\u53d1\u8d85\u65f6\u65f6\u95f4
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_GIGE_SetResend
<br>
	 *  @brief  Set whethe to enable resend, and set resend
<br>
	 *  @param  handle                 [IN]           Handle
<br>
	 *  @param  bEnable                [IN]           enable resend
<br>
	 *  @param  nMaxResendPercent      [IN]           Max resend persent
<br>
	 *  @param  nResendTimeout         [IN]           Resend timeout
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_GIGE_SetResend(void*, unsigned int, unsigned int, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2195</i>
	 */
	int MV_GIGE_SetResend(Pointer handle, int bEnable, int nMaxResendPercent, int nResendTimeout);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCPSPacketSize(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u7f51\u7edc\u5305\u5927\u5c0f
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u7f51\u7edc\u5305\u5927\u5c0f\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetWidth
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCPSPacketSize(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  Get network packet size
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of network packet size
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetWidth
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_GIGE_GetGevSCPSPacketSize(void*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2215</i>
	 */
	int MV_GIGE_GetGevSCPSPacketSize(Pointer handle, MVCC_INTVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_SetGevSCPSPacketSize(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u7f51\u7edc\u5305\u5927\u5c0f
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u7f51\u7edc\u5305\u5927\u5c0f
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u7f51\u7edc\u5305\u5927\u5c0f\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_SetGevSCPSPacketSize(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set network packet size
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const unsigned int nValue   [IN]        Packet size to set
<br>
	 *  @return Success, return MV_OK, and change packet size to setting value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_GIGE_SetGevSCPSPacketSize(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2230</i>
	 */
	int MV_GIGE_SetGevSCPSPacketSize(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCPD(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  \u83b7\u53d6\u7f51\u7edc\u5305\u53d1\u9001\u95f4\u9694
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u6709\u5173\u76f8\u673a\u7f51\u7edc\u5305\u53d1\u9001\u95f4\u9694\u7ed3\u6784\u4f53\u6307\u9488
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  
<br>
	 *          \u53ef\u53c2\u7167\u63a5\u53e3MV_CC_GetWidth
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCPD(IN void* handle, IN OUT MVCC_INTVALUE* pstValue);
<br>
	 *  @brief  Get network packet sending delay
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  MVCC_INTVALUE* pstValue     [IN][OUT]   Structure pointer of network packet sending delay
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 *  
<br>
	 *          Refer to MV_CC_GetWidth
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_GIGE_GetGevSCPD(void*, MVCC_INTVALUE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2249</i>
	 */
	int MV_GIGE_GetGevSCPD(Pointer handle, MVCC_INTVALUE pstValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_SetGevSCPD(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  \u8bbe\u7f6e\u7f51\u7edc\u5305\u53d1\u9001\u95f4\u9694
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          const unsigned int nValue   [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u7f51\u7edc\u5305\u53d1\u9001\u95f4\u9694
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u7f51\u7edc\u5305\u53d1\u9001\u95f4\u9694\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_SetGevSCPD(IN void* handle, IN const unsigned int nValue);
<br>
	 *  @brief  Set network packet sending delay
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          const unsigned int nValue   [IN]        Packet delay to set
<br>
	 *  @return Success, return MV_OK, and change packet delay to setting value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_GIGE_SetGevSCPD(void*, const unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2264</i>
	 */
	int MV_GIGE_SetGevSCPD(Pointer handle, int nValue);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCDA(IN void* handle, unsigned int* pnIP);
<br>
	 *  @brief  \u83b7\u53d6\u63a5\u6536\u7aefIP\u5730\u5740\uff0c0xa9fe0102 \u8868\u793a 169.254.1.2
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  unsigned int* pnIP          [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u63a5\u6536\u7aefIP\u5730\u5740
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCDA(IN void* handle, unsigned int* pnIP);
<br>
	 *  @brief  Get receiver IP address, 0xa9fe0102 indicates 169.254.1.2
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  unsigned int* pnIP          [IN][OUT]   Receiver IP address
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_GIGE_GetGevSCDA(void*, unsigned int*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2279</i><br>
	 * @deprecated use the safer methods {@link #MV_GIGE_GetGevSCDA(Pointer, IntBuffer)} and {@link #MV_GIGE_GetGevSCDA(Pointer, IntByReference)} instead
	 */
	@Deprecated 
	int MV_GIGE_GetGevSCDA(Pointer handle, IntByReference pnIP);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCDA(IN void* handle, unsigned int* pnIP);
<br>
	 *  @brief  \u83b7\u53d6\u63a5\u6536\u7aefIP\u5730\u5740\uff0c0xa9fe0102 \u8868\u793a 169.254.1.2
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  unsigned int* pnIP          [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u63a5\u6536\u7aefIP\u5730\u5740
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCDA(IN void* handle, unsigned int* pnIP);
<br>
	 *  @brief  Get receiver IP address, 0xa9fe0102 indicates 169.254.1.2
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  unsigned int* pnIP          [IN][OUT]   Receiver IP address
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_GIGE_GetGevSCDA(void*, unsigned int*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2279</i>
	 */
	int MV_GIGE_GetGevSCDA(Pointer handle, IntBuffer pnIP);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_SetGevSCDA(IN void* handle, unsigned int nIP);
<br>
	 *  @brief  \u8bbe\u7f6e\u63a5\u6536\u7aefIP\u5730\u5740
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          unsigned int nIP            [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u63a5\u6536\u7aefIP\u5730\u5740
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u63a5\u6536\u7aefIP\u5730\u5740\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_SetGevSCDA(IN void* handle, unsigned int nIP);
<br>
	 *  @brief  Set receiver IP address
<br>
	 *  @param  void* handle                [IN]        Handel
<br>
	 *          unsigned int nIP            [IN]        Receiver IP address to set
<br>
	 *  @return Success, return MV_OK, and change receiver IP address to setting value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_GIGE_SetGevSCDA(void*, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2294</i>
	 */
	int MV_GIGE_SetGevSCDA(Pointer handle, int nIP);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCSP(IN void* handle, unsigned int* pnPort);
<br>
	 *  @brief  \u83b7\u53d6\u53d1\u9001\u7aef\u7684\u7aef\u53e3\u53f7
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  unsigned int* pnPort        [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u53d1\u9001\u7aef\u7684\u7aef\u53e3\u53f7
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCSP(IN void* handle, unsigned int* pnPort);
<br>
	 *  @brief  Get transmitter port number
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  unsigned int* pnPort        [IN][OUT]   Transmitter port number
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_GIGE_GetGevSCSP(void*, unsigned int*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2309</i><br>
	 * @deprecated use the safer methods {@link #MV_GIGE_GetGevSCSP(Pointer, IntBuffer)} and {@link #MV_GIGE_GetGevSCSP(Pointer, IntByReference)} instead
	 */
	@Deprecated 
	int MV_GIGE_GetGevSCSP(Pointer handle, IntByReference pnPort);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCSP(IN void* handle, unsigned int* pnPort);
<br>
	 *  @brief  \u83b7\u53d6\u53d1\u9001\u7aef\u7684\u7aef\u53e3\u53f7
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *  @param  unsigned int* pnPort        [IN][OUT]   \u8fd4\u56de\u7ed9\u8c03\u7528\u8005\u53d1\u9001\u7aef\u7684\u7aef\u53e3\u53f7
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_GetGevSCSP(IN void* handle, unsigned int* pnPort);
<br>
	 *  @brief  Get transmitter port number
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *  @param  unsigned int* pnPort        [IN][OUT]   Transmitter port number
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_GIGE_GetGevSCSP(void*, unsigned int*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2309</i>
	 */
	int MV_GIGE_GetGevSCSP(Pointer handle, IntBuffer pnPort);
	/**
	 * @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_SetGevSCSP(IN void* handle, unsigned int nPort);
<br>
	 *  @brief  \u8bbe\u7f6e\u53d1\u9001\u7aef\u7684\u7aef\u53e3\u53f7
<br>
	 *  @param  void* handle                [IN]        \u76f8\u673a\u53e5\u67c4
<br>
	 *          unsigned int nPort          [IN]        \u60f3\u8981\u8bbe\u7f6e\u7684\u53d1\u9001\u7aef\u7684\u7aef\u53e3\u53f7
<br>
	 *  @return \u6210\u529f,\u8fd4\u56deMV_OK,\u5e76\u4e14\u76f8\u673a\u53d1\u9001\u7aef\u7684\u7aef\u53e3\u53f7\u4f1a\u66f4\u6539\u4e3a\u76f8\u5e94\u503c\uff0c\u5931\u8d25,\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAMCTRL_API int __stdcall MV_GIGE_SetGevSCSP(IN void* handle, unsigned int nPort);
<br>
	 *  @brief  Set transmitter port number
<br>
	 *  @param  void* handle                [IN]        Handle
<br>
	 *          unsigned int nPort          [IN]        Transmitter port number to set
<br>
	 *  @return Success, return MV_OK, and change transmitter port number to setting value. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_GIGE_SetGevSCSP(void*, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2324</i>
	 */
	int MV_GIGE_SetGevSCSP(Pointer handle, int nPort);
	/**
	 * @fn      MV_GIGE_SetTransmissionType
<br>
	 * @brief   \u8bbe\u7f6e\u4f20\u8f93\u6a21\u5f0f\uff0c\u53ef\u4ee5\u4e3a\u5355\u64ad\u6a21\u5f0f\u3001\u7ec4\u64ad\u6a21\u5f0f\u7b49
<br>
	 * @param   handle                      [IN]       \u76f8\u673a\u53e5\u67c4
<br>
	 * @param   stTransmissionType          [IN]       \u4f20\u8f93\u6a21\u5f0f\u7ed3\u6784\u4f53
<br>
	 * @return \u8fd4\u56de\u6210\u529f\u6216\u9519\u8bef\u7801
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_GIGE_SetTransmissionType(void*, MV_TRANSMISSION_TYPE*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2333</i>
	 */
	int MV_GIGE_SetTransmissionType(Pointer handle, MV_TRANSMISSION_TYPE pstTransmissionType);
	/**
	 * @fn      MV_GIGE_IssueActionCommand
<br>
	 * @brief   \u53d1\u51fa\u52a8\u4f5c\u547d\u4ee4
<br>
	 * @param   pstActionCmdInfo                   [IN]       \u52a8\u4f5c\u547d\u4ee4\u4fe1\u606f | en:Action Command
<br>
	 * @param   MV_ACTION_CMD_RESULT_LIST          [OUT]      \u52a8\u4f5c\u547d\u4ee4\u8fd4\u56de\u4fe1\u606f\u5217\u8868 | en:Action Command Result List
<br>
	 * @return \u8fd4\u56de\u6210\u529f\u6216\u9519\u8bef\u7801
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_GIGE_IssueActionCommand(MV_ACTION_CMD_INFO*, MV_ACTION_CMD_RESULT_LIST*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2342</i>
	 */
	int MV_GIGE_IssueActionCommand(MV_ACTION_CMD_INFO pstActionCmdInfo, MV_ACTION_CMD_RESULT_LIST pstActionCmdResults);
	/**
	 * @fn     MV_CAML_SetDeviceBauderate
<br>
	 *  @brief  \u8bbe\u7f6e\u8bbe\u5907\u6ce2\u7279\u7387
<br>
	 *  @param  handle\uff1a\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  nBaudrate               [IN]      \u8bbe\u7f6e\u7684\u6ce2\u7279\u7387\u503c\uff0c\u6570\u503c\u53c2\u8003CameraParams.h\u4e2d\u5b8f\u5b9a\u4e49\uff0c\u5982#define MV_CAML_BAUDRATE_9600  0x00000001
<br>
	 *  @return \u89c1\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAML_SetDeviceBauderate
<br>
	 *  @brief  Set device bauderate using one of the CL_BAUDRATE_XXXX value
<br>
	 *  @param  handle Handle
<br>
	 *  @param  nBaudrate               [IN]      baud rate to set. Refer to the 'CameraParams.h' for parameter definitions, for example, #define MV_CAML_BAUDRATE_9600  0x00000001
<br>
	 *  @return Refer to error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CAML_SetDeviceBauderate(void*, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2361</i>
	 */
	int MV_CAML_SetDeviceBauderate(Pointer handle, int nBaudrate);
	/**
	 * @fn     MV_CAML_GetDeviceBauderate
<br>
	 *  @brief  \u83b7\u53d6\u8bbe\u5907\u6ce2\u7279\u7387
<br>
	 *  @param  handle\uff1a\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  pnCurrentBaudrate               [OUT]      \u6ce2\u7279\u7387\u4fe1\u606f\u6307\u9488\uff0c\u6570\u503c\u53c2\u8003CameraParams.h\u4e2d\u5b8f\u5b9a\u4e49\uff0c\u5982#define MV_CAML_BAUDRATE_9600  0x00000001
<br>
	 *  @return \u89c1\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAML_GetDeviceBauderate
<br>
	 *  @brief  Returns the current device bauderate, using one of the CL_BAUDRATE_XXXX value
<br>
	 *  @param  handle Handle
<br>
	 *  @param  pnCurrentBaudrate               [OUT]      Return pointer of baud rate to user. Refer to the 'CameraParams.h' for parameter definitions, for example, #define MV_CAML_BAUDRATE_9600  0x00000001
<br>
	 *  @return Refer to error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CAML_GetDeviceBauderate(void*, unsigned int*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2376</i><br>
	 * @deprecated use the safer methods {@link #MV_CAML_GetDeviceBauderate(Pointer, IntBuffer)} and {@link #MV_CAML_GetDeviceBauderate(Pointer, IntByReference)} instead
	 */
	@Deprecated 
	int MV_CAML_GetDeviceBauderate(Pointer handle, IntByReference pnCurrentBaudrate);
	/**
	 * @fn     MV_CAML_GetDeviceBauderate
<br>
	 *  @brief  \u83b7\u53d6\u8bbe\u5907\u6ce2\u7279\u7387
<br>
	 *  @param  handle\uff1a\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  pnCurrentBaudrate               [OUT]      \u6ce2\u7279\u7387\u4fe1\u606f\u6307\u9488\uff0c\u6570\u503c\u53c2\u8003CameraParams.h\u4e2d\u5b8f\u5b9a\u4e49\uff0c\u5982#define MV_CAML_BAUDRATE_9600  0x00000001
<br>
	 *  @return \u89c1\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAML_GetDeviceBauderate
<br>
	 *  @brief  Returns the current device bauderate, using one of the CL_BAUDRATE_XXXX value
<br>
	 *  @param  handle Handle
<br>
	 *  @param  pnCurrentBaudrate               [OUT]      Return pointer of baud rate to user. Refer to the 'CameraParams.h' for parameter definitions, for example, #define MV_CAML_BAUDRATE_9600  0x00000001
<br>
	 *  @return Refer to error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CAML_GetDeviceBauderate(void*, unsigned int*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2376</i>
	 */
	int MV_CAML_GetDeviceBauderate(Pointer handle, IntBuffer pnCurrentBaudrate);
	/**
	 * @fn     MV_CAML_GetSupportBauderates
<br>
	 *  @brief  \u83b7\u53d6\u8bbe\u5907\u4e0e\u4e3b\u673a\u95f4\u8fde\u63a5\u652f\u6301\u7684\u6ce2\u7279\u7387
<br>
	 *  @param  handle\uff1a\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  pnBaudrateAblity               [OUT]      \u652f\u6301\u7684\u6ce2\u7279\u7387\u4fe1\u606f\u7684\u6307\u9488\u3002\u6240\u652f\u6301\u6ce2\u7279\u7387\u7684\u6216\u8fd0\u7b97\u7ed3\u679c\uff0c\u5355\u4e2a\u6570\u503c\u53c2\u8003CameraParams.h\u4e2d\u5b8f\u5b9a\u4e49\uff0c\u5982#define MV_CAML_BAUDRATE_9600  0x00000001
<br>
	 *  @return \u89c1\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAML_GetSupportBauderates
<br>
	 *  @brief  Returns supported bauderates of the combined device and host interface
<br>
	 *  @param  handle Handle
<br>
	 *  @param  pnBaudrateAblity               [OUT]      Return pointer of the supported bauderates to user. 'OR' operation results of the supported bauderates. Refer to the 'CameraParams.h' for single value definitions, for example, #define MV_CAML_BAUDRATE_9600  0x00000001
<br>
	 *  @return Refer to error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CAML_GetSupportBauderates(void*, unsigned int*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2391</i><br>
	 * @deprecated use the safer methods {@link #MV_CAML_GetSupportBauderates(Pointer, IntBuffer)} and {@link #MV_CAML_GetSupportBauderates(Pointer, IntByReference)} instead
	 */
	@Deprecated 
	int MV_CAML_GetSupportBauderates(Pointer handle, IntByReference pnBaudrateAblity);
	/**
	 * @fn     MV_CAML_GetSupportBauderates
<br>
	 *  @brief  \u83b7\u53d6\u8bbe\u5907\u4e0e\u4e3b\u673a\u95f4\u8fde\u63a5\u652f\u6301\u7684\u6ce2\u7279\u7387
<br>
	 *  @param  handle\uff1a\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  pnBaudrateAblity               [OUT]      \u652f\u6301\u7684\u6ce2\u7279\u7387\u4fe1\u606f\u7684\u6307\u9488\u3002\u6240\u652f\u6301\u6ce2\u7279\u7387\u7684\u6216\u8fd0\u7b97\u7ed3\u679c\uff0c\u5355\u4e2a\u6570\u503c\u53c2\u8003CameraParams.h\u4e2d\u5b8f\u5b9a\u4e49\uff0c\u5982#define MV_CAML_BAUDRATE_9600  0x00000001
<br>
	 *  @return \u89c1\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAML_GetSupportBauderates
<br>
	 *  @brief  Returns supported bauderates of the combined device and host interface
<br>
	 *  @param  handle Handle
<br>
	 *  @param  pnBaudrateAblity               [OUT]      Return pointer of the supported bauderates to user. 'OR' operation results of the supported bauderates. Refer to the 'CameraParams.h' for single value definitions, for example, #define MV_CAML_BAUDRATE_9600  0x00000001
<br>
	 *  @return Refer to error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CAML_GetSupportBauderates(void*, unsigned int*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2391</i>
	 */
	int MV_CAML_GetSupportBauderates(Pointer handle, IntBuffer pnBaudrateAblity);
	/**
	 * @fn     MV_CAML_SetGenCPTimeOut
<br>
	 *  @brief  \u8bbe\u7f6e\u4e32\u53e3\u64cd\u4f5c\u7b49\u5f85\u65f6\u957f
<br>
	 *  @param  handle\uff1a\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  nMillisec               [IN]      \u4e32\u53e3\u64cd\u4f5c\u7684\u7b49\u5f85\u65f6\u957f, ms
<br>
	 *  @return \u89c1\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CAML_SetGenCPTimeOut
<br>
	 *  @brief  Sets the timeout for operations on the serial port
<br>
	 *  @param  handle Handle
<br>
	 *  @param  nMillisec               [IN]      Timeout in [ms] for operations on the serial port.
<br>
	 *  @return Refer to error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CAML_SetGenCPTimeOut(void*, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2406</i>
	 */
	int MV_CAML_SetGenCPTimeOut(Pointer handle, int nMillisec);
	/**
	 * @fn     MV_CC_SaveImageEx2
<br>
	 *  @brief  \u4fdd\u5b58\u56fe\u7247\uff0c\u652f\u6301Bmp\u548cJpeg.\u7f16\u7801\u8d28\u91cf\u572850-99\u4e4b\u524d
<br>
	 *  @param  handle                 [IN]           \u53e5\u67c4\u5730\u5740
<br>
	 *  @param  pSaveParam             [IN][OUT]          \u4fdd\u5b58\u56fe\u7247\u53c2\u6570\u7ed3\u6784\u4f53
<br>
	 * pData;              // [IN]     \u8f93\u5165\u6570\u636e\u7f13\u5b58
<br>
	 * nDataLen;           // [IN]     \u8f93\u5165\u6570\u636e\u5927\u5c0f
<br>
	 * enPixelType;        // [IN]     \u8f93\u5165\u6570\u636e\u7684\u50cf\u7d20\u683c\u5f0f
<br>
	 * nWidth;             // [IN]     \u56fe\u50cf\u5bbd
<br>
	 * nHeight;            // [IN]     \u56fe\u50cf\u9ad8
<br>
	 * pImageBuffer;       // [OUT]    \u8f93\u51fa\u56fe\u7247\u7f13\u5b58
<br>
	 * nImageLen;          // [OUT]    \u8f93\u51fa\u56fe\u7247\u5927\u5c0f
<br>
	 * nBufferSize;        // [IN]     \u63d0\u4f9b\u7684\u8f93\u51fa\u7f13\u51b2\u533a\u5927\u5c0f
<br>
	 * enImageType;        // [IN]     \u8f93\u51fa\u56fe\u7247\u683c\u5f0f
<br>
	 * nJpgQuality;        // [IN]     \u7f16\u7801\u8d28\u91cf, (50-99]
<br>
	 * iMethodValue        // [IN]     Bayer\u683c\u5f0f\u8f6c\u4e3aRGB24\u7684\u63d2\u503c\u65b9\u6cd5
<br>
	 * nReserved[4];
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_SaveImageEx2
<br>
	 *  @brief  Save image, support Bmp and Jpeg. Encoding quality, (50-99]
<br>
	 *  @param  handle                 [IN]           Handle
<br>
	 *  @param  pSaveParam             [IN][OUT]           Save image parameters structure
<br>
	 * pData;              // [IN]     Input data buffer
<br>
	 * nDataLen;           // [IN]     Input data size
<br>
	 * enPixelType;        // [IN]     Pixel format of input data
<br>
	 * nWidth;             // [IN]     Image width
<br>
	 * nHeight;            // [IN]     Image height
<br>
	 * pImageBuffer;       // [OUT]    Output image buffer
<br>
	 * nImageLen;          // [OUT]    Output image size
<br>
	 * nBufferSize;        // [IN]     Output buffer size provided
<br>
	 * enImageType;        // [IN]     Output image format
<br>
	 * nJpgQuality;        // [IN]     Encoding quality, (50-99]
<br>
	 * iMethodValue        // [IN]     Interpolation method of convert Bayer to RGB24
<br>
	 * nReserved[4];
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SaveImageEx2(void*, MV_SAVE_IMAGE_PARAM_EX*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2565</i>
	 */
	int MV_CC_SaveImageEx2(Pointer handle, MV_SAVE_IMAGE_PARAM_EX pSaveParam);
	/**
	 * @fn     MV_CC_ConvertPixelType
<br>
	 *  @brief  \u50cf\u7d20\u683c\u5f0f\u8f6c\u6362
<br>
	 *  @param  pstCvtParam             [IN][OUT]          \u4fdd\u5b58\u56fe\u7247\u53c2\u6570\u7ed3\u6784\u4f53
<br>
	 * unsigned short         nWidth;             // [IN]     \u56fe\u50cf\u5bbd
<br>
	 * unsigned short         nHeight;            // [IN]     \u56fe\u50cf\u9ad8
<br>
	 * enum MvGvspPixelType   enSrcPixelType;     // [IN]     \u6e90\u50cf\u7d20\u683c\u5f0f
<br>
	 * unsigned char*         pSrcData;           // [IN]     \u8f93\u5165\u6570\u636e\u7f13\u5b58
<br>
	 * unsigned int           nSrcDataLen;        // [IN]     \u8f93\u5165\u6570\u636e\u5927\u5c0f
<br>
	 * enum MvGvspPixelType   enDstPixelType;     // [IN]     \u76ee\u6807\u50cf\u7d20\u683c\u5f0f
<br>
	 * unsigned char*         pDstBuffer;         // [OUT]    \u8f93\u51fa\u6570\u636e\u7f13\u5b58
<br>
	 * unsigned int           nDstLen;            // [OUT]    \u8f93\u51fa\u6570\u636e\u5927\u5c0f
<br>
	 * unsigned int           nDstBufferSize;     // [IN]     \u63d0\u4f9b\u7684\u8f93\u51fa\u7f13\u51b2\u533a\u5927\u5c0f
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_ConvertPixelType
<br>
	 *  @brief  Pixel format conversion
<br>
	 *  @param  pstCvtParam             [IN][OUT]          Save image parameter structure
<br>
	 * unsigned short         nWidth;             // [IN]     Width
<br>
	 * unsigned short         nHeight;            // [IN]     Height
<br>
	 * enum MvGvspPixelType   enSrcPixelType;     // [IN]     Source pixel format
<br>
	 * unsigned char*         pSrcData;           // [IN]     Input data buffer
<br>
	 * unsigned int           nSrcDataLen;        // [IN]     Input data size
<br>
	 * enum MvGvspPixelType   enDstPixelType;     // [IN]     Destination pixel format
<br>
	 * unsigned char*         pDstBuffer;         // [OUT]    Output data buffer
<br>
	 * unsigned int           nDstLen;            // [OUT]    Output data size
<br>
	 * unsigned int           nDstBufferSize;     // [IN]     Provided output buffer size
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_ConvertPixelType(void*, MV_CC_PIXEL_CONVERT_PARAM*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2596</i>
	 */
	int MV_CC_ConvertPixelType(Pointer handle, MV_CC_PIXEL_CONVERT_PARAM pstCvtParam);
	/**
	 * @fn     MV_CC_SetBayerCvtQuality
<br>
	 *  @brief  \u63d2\u503c\u7b97\u6cd5\u7c7b\u578b\u8bbe\u7f6e
<br>
	 *  @param  BayerCvtQuality             [IN]          Bayer\u7684\u63d2\u503c\u65b9\u6cd5  0-\u6700\u8fd1\u90bb 1-\u53cc\u7ebf\u6027 2-Hamilton
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_SetBayerCvtQuality
<br>
	 *  @brief  Interpolation algorithm type setting
<br>
	 *  @param  BayerCvtQuality             [IN]          Bayer interpolation method  0-nearest neighbour 1-bilinearity 2-Hamilton
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SetBayerCvtQuality(void*, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2609</i>
	 */
	int MV_CC_SetBayerCvtQuality(Pointer handle, int BayerCvtQuality);
	/**
	 * @fn     MV_CC_GetTlProxy
<br>
	 *  @brief  \u83b7\u53d6GenICam\u4ee3\u7406
<br>
	 *  @param  handle                 [IN]           \u53e5\u67c4\u5730\u5740
<br>
	 *  @return GenICam\u4ee3\u7406\u7c7b\u6307\u9488 \uff0c\u6b63\u5e38\u8fd4\u56de\u503c\u975eNULL\uff1b\u5f02\u5e38\u8fd4\u56deNULL
<br>
	 *  @fn     MV_CC_GetTlProxy
<br>
	 *  @brief  Get GenICam proxy
<br>
	 *  @param  handle                 [IN]           Handle address
<br>
	 *  @return GenICam proxy pointer, normal, return non-NULL; exception, return NULL
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>void* MV_CC_GetTlProxy(void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2622</i>
	 */
	Pointer MV_CC_GetTlProxy(Pointer handle);
	/**
	 * @fn     MV_CC_FeatureSave
<br>
	 *  @brief  \u4fdd\u5b58\u76f8\u673a\u5c5e\u6027
<br>
	 *  @param  handle                [IN]           \u53e5\u67c4\u5730\u5740
<br>
	 *  @param  pFileName             [IN]          \u5c5e\u6027\u6587\u4ef6\u540d
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_FeatureSave
<br>
	 *  @brief  Save camera feature
<br>
	 *  @param  handle                [IN]           Handle
<br>
	 *  @param  pFileName             [IN]          File name
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_FeatureSave(void*, const char*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2638</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_FeatureSave(Pointer, String)} and {@link #MV_CC_FeatureSave(Pointer, Pointer)} instead
	 */
	@Deprecated 
	int MV_CC_FeatureSave(Pointer handle, Pointer pFileName);
	/**
	 * @fn     MV_CC_FeatureSave
<br>
	 *  @brief  \u4fdd\u5b58\u76f8\u673a\u5c5e\u6027
<br>
	 *  @param  handle                [IN]           \u53e5\u67c4\u5730\u5740
<br>
	 *  @param  pFileName             [IN]          \u5c5e\u6027\u6587\u4ef6\u540d
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_FeatureSave
<br>
	 *  @brief  Save camera feature
<br>
	 *  @param  handle                [IN]           Handle
<br>
	 *  @param  pFileName             [IN]          File name
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_FeatureSave(void*, const char*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2638</i>
	 */
	int MV_CC_FeatureSave(Pointer handle, String pFileName);
	/**
	 * @fn     MV_CC_FeatureLoad
<br>
	 *  @brief  \u5bfc\u5165\u76f8\u673a\u5c5e\u6027
<br>
	 *  @param  handle                [IN]           \u53e5\u67c4\u5730\u5740
<br>
	 *  @param  pFileName             [IN]          \u5c5e\u6027\u6587\u4ef6\u540d
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_FeatureLoad
<br>
	 *  @brief  Load camera feature
<br>
	 *  @param  handle                [IN]           Handle
<br>
	 *  @param  pFileName             [IN]          File name
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_FeatureLoad(void*, const char*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2653</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_FeatureLoad(Pointer, String)} and {@link #MV_CC_FeatureLoad(Pointer, Pointer)} instead
	 */
	@Deprecated 
	int MV_CC_FeatureLoad(Pointer handle, Pointer pFileName);
	/**
	 * @fn     MV_CC_FeatureLoad
<br>
	 *  @brief  \u5bfc\u5165\u76f8\u673a\u5c5e\u6027
<br>
	 *  @param  handle                [IN]           \u53e5\u67c4\u5730\u5740
<br>
	 *  @param  pFileName             [IN]          \u5c5e\u6027\u6587\u4ef6\u540d
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_FeatureLoad
<br>
	 *  @brief  Load camera feature
<br>
	 *  @param  handle                [IN]           Handle
<br>
	 *  @param  pFileName             [IN]          File name
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_FeatureLoad(void*, const char*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2653</i>
	 */
	int MV_CC_FeatureLoad(Pointer handle, String pFileName);
	/**
	 * @fn     MV_CC_FileAccessRead
<br>
	 *  @brief  \u4ece\u76f8\u673a\u8bfb\u53d6\u6587\u4ef6
<br>
	 *  @param  handle                [IN]           \u53e5\u67c4\u5730\u5740
<br>
	 *  @param  pstFileAccess         [IN]           \u6587\u4ef6\u5b58\u53d6\u7ed3\u6784\u4f53
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_FileAccessRead
<br>
	 *  @brief  Read the file from the camera
<br>
	 *  @param  handle                [IN]           Handle
<br>
	 *  @param  pstFileAccess         [IN]           File access structure
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_FileAccessRead(void*, MV_CC_FILE_ACCESS*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2669</i>
	 */
	int MV_CC_FileAccessRead(Pointer handle, MV_CC_FILE_ACCESS pstFileAccess);
	/**
	 * @fn     MV_CC_FileAccessWrite
<br>
	 *  @brief  \u5c06\u6587\u4ef6\u5199\u5165\u76f8\u673a
<br>
	 *  @param  handle                [IN]           \u53e5\u67c4\u5730\u5740
<br>
	 *  @param  pstFileAccess         [IN]           \u6587\u4ef6\u5b58\u53d6\u7ed3\u6784\u4f53
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_FileAccessWrite
<br>
	 *  @brief  Write the file to camera
<br>
	 *  @param  handle                [IN]           Handle
<br>
	 *  @param  pstFileAccess         [IN]           File access structure
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_FileAccessWrite(void*, MV_CC_FILE_ACCESS*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2684</i>
	 */
	int MV_CC_FileAccessWrite(Pointer handle, MV_CC_FILE_ACCESS pstFileAccess);
	/**
	 * @fn     MV_CC_GetFileAccessProgress
<br>
	 *  @brief  \u83b7\u53d6\u6587\u4ef6\u5b58\u53d6\u7684\u8fdb\u5ea6
<br>
	 *  @param  handle                  [IN]           \u53e5\u67c4\u5730\u5740
<br>
	 *  @param  pstFileAccessProgress   [IN]           \u8fdb\u5ea6\u5185\u5bb9
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 \uff08\u5f53\u524d\u6587\u4ef6\u5b58\u53d6\u7684\u72b6\u6001\uff09
<br>
	 *  @fn     MV_CC_GetFileAccessProgress
<br>
	 *  @brief  Get File Access Progress 
<br>
	 *  @param  handle                  [IN]           Handle
<br>
	 *  @param  pstFileAccessProgress   [IN]           File access Progress
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetFileAccessProgress(void*, MV_CC_FILE_ACCESS_PROGRESS*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2699</i>
	 */
	int MV_CC_GetFileAccessProgress(Pointer handle, MV_CC_FILE_ACCESS_PROGRESS pstFileAccessProgress);
	/**
	 * @fn     MV_CC_StartRecord
<br>
	 *  @brief  \u5f00\u59cb\u5f55\u50cf
<br>
	 *  @param  handle                [IN]           \u53e5\u67c4\u5730\u5740
<br>
	 *  @param  pstRecordParam         [IN]          \u5f55\u50cf\u53c2\u6570\u7ed3\u6784\u4f53
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_StartRecord
<br>
	 *  @brief  Start Record
<br>
	 *  @param  handle                [IN]           Handle
<br>
	 *  @param  pstRecordParam         [IN]          Record param structure
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_StartRecord(void*, MV_CC_RECORD_PARAM*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2714</i>
	 */
	int MV_CC_StartRecord(Pointer handle, MV_CC_RECORD_PARAM pstRecordParam);
	/**
	 * @fn     MV_CC_InputOneFrame
<br>
	 *  @brief  \u8f93\u5165\u5f55\u50cf\u6570\u636e
<br>
	 *  @param  handle                [IN]           \u53e5\u67c4\u5730\u5740
<br>
	 *  @param  pstInputFrameInfo         [IN]       \u5f55\u50cf\u6570\u636e\u7ed3\u6784\u4f53
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_InputOneFrame
<br>
	 *  @brief  Input RAW data to Record
<br>
	 *  @param  handle                [IN]           Handle
<br>
	 *  @param  pstInputFrameInfo         [IN]       Record data structure
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_InputOneFrame(void*, MV_CC_INPUT_FRAME_INFO*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2729</i>
	 */
	int MV_CC_InputOneFrame(Pointer handle, MV_CC_INPUT_FRAME_INFO pstInputFrameInfo);
	/**
	 * @fn     MV_CC_StopRecord
<br>
	 *  @brief  \u505c\u6b62\u5f55\u50cf
<br>
	 *  @param  handle                [IN]           \u53e5\u67c4\u5730\u5740
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_StopRecord
<br>
	 *  @brief  Stop Record
<br>
	 *  @param  handle                [IN]           Handle
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_StopRecord(void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2742</i>
	 */
	int MV_CC_StopRecord(Pointer handle);
	/**
	 * @fn         MV_CC_GetOneFrame
<br>
	 *  @brief      \u83b7\u53d6\u4e00\u5e27\u56fe\u50cf\uff0c\u6b64\u51fd\u6570\u4e3a\u67e5\u8be2\u5f0f\u83b7\u53d6\uff0c\u6bcf\u6b21\u8c03\u7528\u67e5\u8be2\u5185\u90e8\u7f13\u5b58\u6709
<br>
	 * \u65e0\u6570\u636e\uff0c\u6709\u6570\u636e\u5219\u8303\u56f4\u6570\u636e\uff0c\u65e0\u6570\u636e\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 * \uff08\u8be5\u63a5\u53e3\u5df2\u5f03\u7528\uff0c\u5efa\u8bae\u6539\u7528 MV_CC_GetOneFrameTimeOut\u63a5\u53e3\uff09
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param       pData                  [OUT]         \u56fe\u50cf\u6570\u636e\u63a5\u6536\u6307\u9488
<br>
	 *  @param       nDataSize              [IN]          \u63a5\u6536\u7f13\u5b58\u5927\u5c0f
<br>
	 *  @param       pFrameInfo             [OUT]         \u56fe\u50cf\u4fe1\u606f\u7ed3\u6784\u4f53
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_GetOneFrame
<br>
	 *  @brief      Get one frame data, this function is using query to get data, 
<br>
	 * query whether the internal cache has data, return data if there has, return error code if no data
<br>
	 * (This interface is abandoned, it is recommended to use the MV_CC_GetOneFrameTimeOut)
<br>
	 *  @param       handle                 [IN]          Handle
<br>
	 *  @param       pData                  [OUT]         Recevied image data pointer
<br>
	 *  @param       nDataSize              [IN]          Recevied buffer size
<br>
	 *  @param       pFrameInfo             [OUT]         Image information structure
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetOneFrame(void*, unsigned char*, unsigned int, MV_FRAME_OUT_INFO*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2769</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_GetOneFrame(Pointer, ByteBuffer, int, MV_FRAME_OUT_INFO)} and {@link #MV_CC_GetOneFrame(Pointer, Pointer, int, MV_FRAME_OUT_INFO)} instead
	 */
	@Deprecated 
	int MV_CC_GetOneFrame(Pointer handle, Pointer pData, int nDataSize, MV_FRAME_OUT_INFO pFrameInfo);
	/**
	 * @fn         MV_CC_GetOneFrame
<br>
	 *  @brief      \u83b7\u53d6\u4e00\u5e27\u56fe\u50cf\uff0c\u6b64\u51fd\u6570\u4e3a\u67e5\u8be2\u5f0f\u83b7\u53d6\uff0c\u6bcf\u6b21\u8c03\u7528\u67e5\u8be2\u5185\u90e8\u7f13\u5b58\u6709
<br>
	 * \u65e0\u6570\u636e\uff0c\u6709\u6570\u636e\u5219\u8303\u56f4\u6570\u636e\uff0c\u65e0\u6570\u636e\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 * \uff08\u8be5\u63a5\u53e3\u5df2\u5f03\u7528\uff0c\u5efa\u8bae\u6539\u7528 MV_CC_GetOneFrameTimeOut\u63a5\u53e3\uff09
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param       pData                  [OUT]         \u56fe\u50cf\u6570\u636e\u63a5\u6536\u6307\u9488
<br>
	 *  @param       nDataSize              [IN]          \u63a5\u6536\u7f13\u5b58\u5927\u5c0f
<br>
	 *  @param       pFrameInfo             [OUT]         \u56fe\u50cf\u4fe1\u606f\u7ed3\u6784\u4f53
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_GetOneFrame
<br>
	 *  @brief      Get one frame data, this function is using query to get data, 
<br>
	 * query whether the internal cache has data, return data if there has, return error code if no data
<br>
	 * (This interface is abandoned, it is recommended to use the MV_CC_GetOneFrameTimeOut)
<br>
	 *  @param       handle                 [IN]          Handle
<br>
	 *  @param       pData                  [OUT]         Recevied image data pointer
<br>
	 *  @param       nDataSize              [IN]          Recevied buffer size
<br>
	 *  @param       pFrameInfo             [OUT]         Image information structure
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetOneFrame(void*, unsigned char*, unsigned int, MV_FRAME_OUT_INFO*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2769</i>
	 */
	int MV_CC_GetOneFrame(Pointer handle, ByteBuffer pData, int nDataSize, MV_FRAME_OUT_INFO pFrameInfo);
	/**
	 * @fn         MV_CC_GetOneFrameEx
<br>
	 *  @brief      \u83b7\u53d6\u4e00\u5e27trunck\u6570\u636e\uff0c\u6b64\u51fd\u6570\u4e3a\u67e5\u8be2\u5f0f\u83b7\u53d6\uff0c\u6bcf\u6b21\u8c03\u7528\u67e5\u8be2\u5185\u90e8
<br>
	 * \u7f13\u5b58\u6709\u65e0\u6570\u636e\uff0c\u6709\u6570\u636e\u5219\u8303\u56f4\u6570\u636e\uff0c\u65e0\u6570\u636e\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 * \uff08\u8be5\u63a5\u53e3\u5df2\u5f03\u7528\uff0c\u5efa\u8bae\u6539\u7528 MV_CC_GetOneFrameTimeOut\u63a5\u53e3\uff09
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param       pData                  [OUT]         \u56fe\u50cf\u6570\u636e\u63a5\u6536\u6307\u9488
<br>
	 *  @param       nDataSize              [IN]          \u63a5\u6536\u7f13\u5b58\u5927\u5c0f
<br>
	 *  @param       pFrameInfo             [OUT]         \u56fe\u50cf\u4fe1\u606f\u7ed3\u6784\u4f53
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_GetOneFrameEx
<br>
	 *  @brief      Get one frame of trunck data, this function is using query to get data, 
<br>
	 * query whether the internal cache has data, return data if there has, return error code if no data
<br>
	 * (This interface is abandoned, it is recommended to use the MV_CC_GetOneFrameTimeOut)
<br>
	 *  @param       handle                 [IN]          Handle
<br>
	 *  @param       pData                  [OUT]         Recevied image data pointer
<br>
	 *  @param       nDataSize              [IN]          Recevied buffer size
<br>
	 *  @param       pFrameInfo             [OUT]         Image information structure
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetOneFrameEx(void*, unsigned char*, unsigned int, MV_FRAME_OUT_INFO_EX*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2792</i><br>
	 * @deprecated use the safer methods {@link #MV_CC_GetOneFrameEx(Pointer, ByteBuffer, int, MV_FRAME_OUT_INFO_EX)} and {@link #MV_CC_GetOneFrameEx(Pointer, Pointer, int, MV_FRAME_OUT_INFO_EX)} instead
	 */
	@Deprecated 
	int MV_CC_GetOneFrameEx(Pointer handle, Pointer pData, int nDataSize, MV_FRAME_OUT_INFO_EX pFrameInfo);
	/**
	 * @fn         MV_CC_GetOneFrameEx
<br>
	 *  @brief      \u83b7\u53d6\u4e00\u5e27trunck\u6570\u636e\uff0c\u6b64\u51fd\u6570\u4e3a\u67e5\u8be2\u5f0f\u83b7\u53d6\uff0c\u6bcf\u6b21\u8c03\u7528\u67e5\u8be2\u5185\u90e8
<br>
	 * \u7f13\u5b58\u6709\u65e0\u6570\u636e\uff0c\u6709\u6570\u636e\u5219\u8303\u56f4\u6570\u636e\uff0c\u65e0\u6570\u636e\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 * \uff08\u8be5\u63a5\u53e3\u5df2\u5f03\u7528\uff0c\u5efa\u8bae\u6539\u7528 MV_CC_GetOneFrameTimeOut\u63a5\u53e3\uff09
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param       pData                  [OUT]         \u56fe\u50cf\u6570\u636e\u63a5\u6536\u6307\u9488
<br>
	 *  @param       nDataSize              [IN]          \u63a5\u6536\u7f13\u5b58\u5927\u5c0f
<br>
	 *  @param       pFrameInfo             [OUT]         \u56fe\u50cf\u4fe1\u606f\u7ed3\u6784\u4f53
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_GetOneFrameEx
<br>
	 *  @brief      Get one frame of trunck data, this function is using query to get data, 
<br>
	 * query whether the internal cache has data, return data if there has, return error code if no data
<br>
	 * (This interface is abandoned, it is recommended to use the MV_CC_GetOneFrameTimeOut)
<br>
	 *  @param       handle                 [IN]          Handle
<br>
	 *  @param       pData                  [OUT]         Recevied image data pointer
<br>
	 *  @param       nDataSize              [IN]          Recevied buffer size
<br>
	 *  @param       pFrameInfo             [OUT]         Image information structure
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_GetOneFrameEx(void*, unsigned char*, unsigned int, MV_FRAME_OUT_INFO_EX*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2792</i>
	 */
	int MV_CC_GetOneFrameEx(Pointer handle, ByteBuffer pData, int nDataSize, MV_FRAME_OUT_INFO_EX pFrameInfo);
	/**
	 * @fn         MV_CC_RegisterImageCallBack
<br>
	 *  @brief      \u6ce8\u518c\u56fe\u50cf\u6570\u636e\u56de\u8c03\uff08\u8be5\u63a5\u53e3\u5df2\u5f03\u7528\uff0c\u5efa\u8bae\u6539\u7528 MV_CC_RegisterImageCallBackEx\u63a5\u53e3\uff09
<br>
	 *  @param       handle                 [IN]          \u53e5\u67c4
<br>
	 *  @param       cbOutput               [IN]          \u56de\u8c03\u51fd\u6570\u6307\u9488
<br>
	 *  @param       pUser                  [IN]          \u7528\u6237\u81ea\u5b9a\u4e49\u53d8\u91cf
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn         MV_CC_RegisterImageCallBack
<br>
	 *  @brief      Register image data callback (This interface is abandoned, it is recommended to use the MV_CC_RegisterImageCallBackEx)
<br>
	 *  @param       handle                 [IN]          Handle
<br>
	 *  @param       cbOutput               [IN]          Callback function pointer
<br>
	 *  @param       pUser                  [IN]          User defined variable
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * *********************************************************************<br>
	 * Original signature : <code>int MV_CC_RegisterImageCallBack(void*, MV_CC_RegisterImageCallBack_cbOutput_callback*, void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2809</i>
	 */
	int MV_CC_RegisterImageCallBack(Pointer handle, MV_CC_RegisterImageCallBack_cbOutput_callback cbOutput, Pointer pUser);
	/**
	 * @fn     MV_CC_SaveImage
<br>
	 *  @brief  \u4fdd\u5b58\u56fe\u7247\uff08\u8be5\u63a5\u53e3\u5df2\u5f03\u7528\uff0c\u5efa\u8bae\u6539\u7528 MV_CC_SaveImageEx\u63a5\u53e3\uff09
<br>
	 *  @param  pSaveParam             [IN][OUT]          \u4fdd\u5b58\u56fe\u7247\u53c2\u6570\u7ed3\u6784\u4f53
<br>
	 * pData;              // [IN]     \u8f93\u5165\u6570\u636e\u7f13\u5b58
<br>
	 * nDataLen;           // [IN]     \u8f93\u5165\u6570\u636e\u5927\u5c0f
<br>
	 * enPixelType;        // [IN]     \u8f93\u5165\u6570\u636e\u7684\u50cf\u7d20\u683c\u5f0f
<br>
	 * nWidth;             // [IN]     \u56fe\u50cf\u5bbd
<br>
	 * nHeight;            // [IN]     \u56fe\u50cf\u9ad8
<br>
	 * pImageBuffer;       // [OUT]    \u8f93\u51fa\u56fe\u7247\u7f13\u5b58
<br>
	 * nImageLen;          // [OUT]    \u8f93\u51fa\u56fe\u7247\u5927\u5c0f
<br>
	 * nBufferSize;        // [IN]     \u63d0\u4f9b\u7684\u8f93\u51fa\u7f13\u51b2\u533a\u5927\u5c0f
<br>
	 * enImageType;        // [IN]     \u8f93\u51fa\u56fe\u7247\u683c\u5f0f
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_SaveImage
<br>
	 *  @brief  Save image (This interface is abandoned, it is recommended to use the MV_CC_SaveImageEx)
<br>
	 *  @param  pSaveParam             [IN][OUT]          Save image parameters structure
<br>
	 * pData;              // [IN]     Input data buffer
<br>
	 * nDataLen;           // [IN]     Input data size
<br>
	 * enPixelType;        // [IN]     Input data pixel format
<br>
	 * nWidth;             // [IN]     Width
<br>
	 * nHeight;            // [IN]     Height
<br>
	 * pImageBuffer;       // [OUT]    Output image buffer
<br>
	 * nImageLen;          // [OUT]    Output image size
<br>
	 * nBufferSize;        // [IN]     Provided output buffer size
<br>
	 * enImageType;        // [IN]     Output image type
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SaveImage(MV_SAVE_IMAGE_PARAM*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2842</i>
	 */
	int MV_CC_SaveImage(MV_SAVE_IMAGE_PARAM pSaveParam);
	/**
	 * @fn     MV_GIGE_ForceIp
<br>
	 *  @brief  \u5f3a\u5236IP\uff08\u8be5\u63a5\u53e3\u5df2\u5f03\u7528\uff0c\u5efa\u8bae\u6539\u7528 MV_GIGE_ForceIpEx\u63a5\u53e3\uff09
<br>
	 *  @param  handle\uff1a\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  nIP               [IN]      \u8bbe\u7f6e\u7684IP
<br>
	 *  @return \u89c1\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_GIGE_ForceIp
<br>
	 *  @brief  Force IP (This interface is abandoned, it is recommended to use the MV_GIGE_ForceIpEx)
<br>
	 *  @param  handle Handle
<br>
	 *  @param  nIP               [IN]      IP to set
<br>
	 *  @return Refer to error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_GIGE_ForceIp(void*, unsigned int)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2857</i>
	 */
	int MV_GIGE_ForceIp(Pointer handle, int nIP);
	/**
	 * @fn     MV_CC_RegisterEventCallBack
<br>
	 *  @brief  \u6ce8\u518c\u4e8b\u4ef6\u56de\u8c03\uff08\u8be5\u63a5\u53e3\u5df2\u5f03\u7528\uff0c\u5efa\u8bae\u6539\u7528 MV_CC_RegisterEventCallBackEx\u63a5\u53e3\uff09
<br>
	 *  @param  handle\uff1a\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  cbEvent           [IN]      \u4e8b\u4ef6\u56de\u8c03\u51fd\u6570\u6307\u9488
<br>
	 *  @param  pUser             [IN]      \u7528\u6237\u81ea\u5b9a\u4e49\u53d8\u91cf
<br>
	 *  @return \u89c1\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 *  @fn     MV_CC_RegisterEventCallBack
<br>
	 *  @brief  Register event callback (this interface has been deprecated and is recommended to be converted to the MV_CC_RegisterEventCallBackEx interface)
<br>
	 *  @param  handle\uff1a\u8bbe\u5907\u53e5\u67c4
<br>
	 *  @param  cbEvent           [IN]      event callback pointer
<br>
	 *  @param  pUser             [IN]      User defined value
<br>
	 *  @return \u89c1\u8fd4\u56de\u9519\u8bef\u7801
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_RegisterEventCallBack(void*, MV_CC_RegisterEventCallBack_cbEvent_callback*, void*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2874</i>
	 */
	int MV_CC_RegisterEventCallBack(Pointer handle, MV_CC_RegisterEventCallBack_cbEvent_callback cbEvent, Pointer pUser);
	/**
	 * @fn     MV_CC_SaveImageEx
<br>
	 *  @brief  \u4fdd\u5b58\u56fe\u7247\uff0c\u652f\u6301Bmp\u548cJpeg.\u7f16\u7801\u8d28\u91cf\u572850-99\u4e4b\u524d \uff08\u8be5\u63a5\u53e3\u5df2\u5f03\u7528\uff0c\u5efa\u8bae\u6539\u7528 MV_CC_SaveImageEx2\u63a5\u53e3\uff09
<br>
	 *  @param  pSaveParam             [IN][OUT]          \u4fdd\u5b58\u56fe\u7247\u53c2\u6570\u7ed3\u6784\u4f53
<br>
	 * pData;              // [IN]     \u8f93\u5165\u6570\u636e\u7f13\u5b58
<br>
	 * nDataLen;           // [IN]     \u8f93\u5165\u6570\u636e\u5927\u5c0f
<br>
	 * enPixelType;        // [IN]     \u8f93\u5165\u6570\u636e\u7684\u50cf\u7d20\u683c\u5f0f
<br>
	 * nWidth;             // [IN]     \u56fe\u50cf\u5bbd
<br>
	 * nHeight;            // [IN]     \u56fe\u50cf\u9ad8
<br>
	 * pImageBuffer;       // [OUT]    \u8f93\u51fa\u56fe\u7247\u7f13\u5b58
<br>
	 * nImageLen;          // [OUT]    \u8f93\u51fa\u56fe\u7247\u5927\u5c0f
<br>
	 * nBufferSize;        // [IN]     \u63d0\u4f9b\u7684\u8f93\u51fa\u7f13\u51b2\u533a\u5927\u5c0f
<br>
	 * enImageType;        // [IN]     \u8f93\u51fa\u56fe\u7247\u683c\u5f0f
<br>
	 * nJpgQuality;        // [IN]     \u7f16\u7801\u8d28\u91cf, (50-99]
<br>
	 * nReserved[4];
<br>
	 *  @return \u6210\u529f\uff0c\u8fd4\u56deMV_OK\uff1b\u9519\u8bef\uff0c\u8fd4\u56de\u9519\u8bef\u7801 
<br>
	 *  @fn     MV_CC_SaveImageEx
<br>
	 *  @brief  Save image, support Bmp and Jpeg. Encoding quality, (50-99]
<br>
	 *  @param  pSaveParam             [IN][OUT]           Save image parameters structure
<br>
	 * pData;              // [IN]     Input data buffer
<br>
	 * nDataLen;           // [IN]     Input data size
<br>
	 * enPixelType;        // [IN]     Pixel format of input data
<br>
	 * nWidth;             // [IN]     Image width
<br>
	 * nHeight;            // [IN]     Image height
<br>
	 * pImageBuffer;       // [OUT]    Output image buffer
<br>
	 * nImageLen;          // [OUT]    Output image size
<br>
	 * nBufferSize;        // [IN]     Output buffer size provided
<br>
	 * enImageType;        // [IN]     Output image format
<br>
	 * nJpgQuality;        // [IN]     Encoding quality, (50-99]
<br>
	 * nReserved[4];
<br>
	 *  @return Success, return MV_OK. Failure, return error code
<br>
	 * **********************************************************************<br>
	 * Original signature : <code>int MV_CC_SaveImageEx(MV_SAVE_IMAGE_PARAM_EX*)</code><br>
	 * <i>native declaration : include\MvCameraControl.h:2911</i>
	 */
	int MV_CC_SaveImageEx(MV_SAVE_IMAGE_PARAM_EX pSaveParam);
	/**
	 * Original signature : <code>int Open(unsigned int, unsigned short)</code><br>
	 * <i>native declaration : include\MvDeviceBase.h:11</i>
	 */
	int Open(int nAccessMode, short nSwitchoverKey);
	/**
	 * Original signature : <code>int Close()</code><br>
	 * <i>native declaration : include\MvDeviceBase.h:16</i>
	 */
	int Close();
	/**
	 * Original signature : <code>bool IsOpen()</code><br>
	 * <i>native declaration : include\MvDeviceBase.h:21</i>
	 */
	byte IsOpen();
	/**
	 * Original signature : <code>int StartGrabbing()</code><br>
	 * <i>native declaration : include\MvDeviceBase.h:26</i>
	 */
	int StartGrabbing();
	/**
	 * Original signature : <code>int StopGrabbing()</code><br>
	 * <i>native declaration : include\MvDeviceBase.h:31</i>
	 */
	int StopGrabbing();
	/**
	 * Original signature : <code>int GetDeviceInfo(MV_CC_DEVICE_INFO&)</code><br>
	 * <i>native declaration : include\MvDeviceBase.h:36</i>
	 */
	int GetDeviceInfo(MV_CC_DEVICE_INFO MV_CC_DEVICE_INFOPtr1);

	/**
	 * Original signature : <code>int GetOneFrame(unsigned char*, unsigned int, MV_FRAME_OUT_INFO*)</code><br>
	 * <i>native declaration : include\MvDeviceBase.h:78</i><br>
	 * @deprecated use the safer methods {@link #GetOneFrame(ByteBuffer, int, MV_FRAME_OUT_INFO)} and {@link #GetOneFrame(Pointer, int, MV_FRAME_OUT_INFO)} instead
	 */
	@Deprecated 
	int GetOneFrame(Pointer pData, int nDataSize, MV_FRAME_OUT_INFO pFrameInfo);
	/**
	 * Original signature : <code>int GetOneFrame(unsigned char*, unsigned int, MV_FRAME_OUT_INFO*)</code><br>
	 * <i>native declaration : include\MvDeviceBase.h:78</i>
	 */
	int GetOneFrame(ByteBuffer pData, int nDataSize, MV_FRAME_OUT_INFO pFrameInfo);
	/**
	 * Original signature : <code>TlProxy GetTlProxy()</code><br>
	 * <i>native declaration : include\MvDeviceBase.h:83</i>
	 */
	Pointer GetTlProxy();
}
