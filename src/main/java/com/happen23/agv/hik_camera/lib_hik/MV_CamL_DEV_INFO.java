package com.happen23.agv.hik_camera.lib_hik;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

/**
 * <i>native declaration : include\CameraParams.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
@Structure.FieldOrder({"chPortID", "chModelName", "chFamilyName", "chDeviceVersion", "chManufacturerName", "chSerialNumber", "nReserved"})
public class MV_CamL_DEV_INFO extends Structure {
	/** C type : unsigned char[64] */
	public byte[] chPortID = new byte[64];
	/** C type : unsigned char[64] */
	public byte[] chModelName = new byte[64];
	/** C type : unsigned char[64] */
	public byte[] chFamilyName = new byte[64];
	/** C type : unsigned char[64] */
	public byte[] chDeviceVersion = new byte[64];
	/** C type : unsigned char[64] */
	public byte[] chManufacturerName = new byte[64];
	/** C type : unsigned char[64] */
	public byte[] chSerialNumber = new byte[64];
	/** C type : unsigned int[38] */
	public int[] nReserved = new int[38];
	public MV_CamL_DEV_INFO() {
		super();
	}
	/**
	 * @param chPortID C type : unsigned char[64]<br>
	 * @param chModelName C type : unsigned char[64]<br>
	 * @param chFamilyName C type : unsigned char[64]<br>
	 * @param chDeviceVersion C type : unsigned char[64]<br>
	 * @param chManufacturerName C type : unsigned char[64]<br>
	 * @param chSerialNumber C type : unsigned char[64]<br>
	 * @param nReserved C type : unsigned int[38]
	 */
	public MV_CamL_DEV_INFO(byte chPortID[], byte chModelName[], byte chFamilyName[], byte chDeviceVersion[], byte chManufacturerName[], byte chSerialNumber[], int nReserved[]) {
		super();
		if ((chPortID.length != this.chPortID.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.chPortID = chPortID;
		if ((chModelName.length != this.chModelName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.chModelName = chModelName;
		if ((chFamilyName.length != this.chFamilyName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.chFamilyName = chFamilyName;
		if ((chDeviceVersion.length != this.chDeviceVersion.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.chDeviceVersion = chDeviceVersion;
		if ((chManufacturerName.length != this.chManufacturerName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.chManufacturerName = chManufacturerName;
		if ((chSerialNumber.length != this.chSerialNumber.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.chSerialNumber = chSerialNumber;
		if ((nReserved.length != this.nReserved.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.nReserved = nReserved;
	}
	public MV_CamL_DEV_INFO(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends MV_CamL_DEV_INFO implements Structure.ByReference {
		
	};
	public static class ByValue extends MV_CamL_DEV_INFO implements Structure.ByValue {
		
	};
}
