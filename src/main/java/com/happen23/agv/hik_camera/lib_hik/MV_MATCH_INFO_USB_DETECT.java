package com.happen23.agv.hik_camera.lib_hik;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : include\CameraParams.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
@Structure.FieldOrder({"nReviceDataSize", "nRevicedFrameCount", "nErrorFrameCount", "nReserved"})
public class MV_MATCH_INFO_USB_DETECT extends Structure {
	/** ch:\u5df2\u63a5\u6536\u6570\u636e\u5927\u5c0f    [\u7edf\u8ba1OpenDevicce\u548cCloseDevice\u4e4b\u95f4\u7684\u6570\u636e\u91cf] | en:Received data size */
	public long nReviceDataSize;
	/** ch:\u5df2\u6536\u5230\u7684\u5e27\u6570 | en:Number of frames received */
	public int nRevicedFrameCount;
	/** ch:\u9519\u8bef\u5e27\u6570 | en:Number of error frames */
	public int nErrorFrameCount;
	/**
	 * ch:\u4fdd\u7559 | en:Reserved<br>
	 * C type : unsigned int[2]
	 */
	public int[] nReserved = new int[2];
	public MV_MATCH_INFO_USB_DETECT() {
		super();
	}
	/**
	 * @param nReviceDataSize ch:\u5df2\u63a5\u6536\u6570\u636e\u5927\u5c0f    [\u7edf\u8ba1OpenDevicce\u548cCloseDevice\u4e4b\u95f4\u7684\u6570\u636e\u91cf] | en:Received data size<br>
	 * @param nRevicedFrameCount ch:\u5df2\u6536\u5230\u7684\u5e27\u6570 | en:Number of frames received<br>
	 * @param nErrorFrameCount ch:\u9519\u8bef\u5e27\u6570 | en:Number of error frames<br>
	 * @param nReserved ch:\u4fdd\u7559 | en:Reserved<br>
	 * C type : unsigned int[2]
	 */
	public MV_MATCH_INFO_USB_DETECT(long nReviceDataSize, int nRevicedFrameCount, int nErrorFrameCount, int nReserved[]) {
		super();
		this.nReviceDataSize = nReviceDataSize;
		this.nRevicedFrameCount = nRevicedFrameCount;
		this.nErrorFrameCount = nErrorFrameCount;
		if ((nReserved.length != this.nReserved.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.nReserved = nReserved;
	}
	public MV_MATCH_INFO_USB_DETECT(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends MV_MATCH_INFO_USB_DETECT implements Structure.ByReference {
		
	};
	public static class ByValue extends MV_MATCH_INFO_USB_DETECT implements Structure.ByValue {
		
	};
}
